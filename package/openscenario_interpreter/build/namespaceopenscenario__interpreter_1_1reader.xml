<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceopenscenario__interpreter_1_1reader" kind="namespace" language="C++">
    <compoundname>openscenario_interpreter::reader</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="element_8hpp_1a507a0e430461b41f5c43cb57398489d3" prot="public" static="no">
        <type>pugi::xml_node</type>
        <definition>using openscenario_interpreter::reader::XML = typedef pugi::xml_node</definition>
        <argsstring></argsstring>
        <name>XML</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" line="40" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="element_8hpp_1a7f9e87950f56e8199290fa1b02d80326" prot="public" static="no">
        <type>typename std::iterator_traits&lt; typename pugi::xml_node::iterator &gt;::difference_type</type>
        <definition>using openscenario_interpreter::reader::Cardinality = typedef typename std::iterator_traits&lt;typename pugi::xml_node::iterator&gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>Cardinality</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" line="42" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="element_8hpp_1ab64ad3c482f0679c0b2de6256f9645ea" prot="public" static="no" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto openscenario_interpreter::reader::unbounded</definition>
        <argsstring></argsstring>
        <name>unbounded</name>
        <initializer>= std::numeric_limits&lt;Cardinality&gt;::max()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" line="45" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="attribute_8hpp_1a087d7c554cbb5233a576205335fb3454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scope</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto openscenario_interpreter::reader::substitute</definition>
        <argsstring>(std::string attribute, Scope &amp;scope)</argsstring>
        <name>substitute</name>
        <param>
          <type>std::string</type>
          <declname>attribute</declname>
        </param>
        <param>
          <type><ref refid="classopenscenario__interpreter_1_1Scope" kindref="compound">Scope</ref> &amp;</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/attribute.hpp" line="37" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/attribute.hpp" bodystart="37" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="attribute_8hpp_1a7150ddb1d3fd82c61238bfbc18ab9c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Node</type>
          </param>
          <param>
            <type>typename Scope</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T openscenario_interpreter::reader::readAttribute</definition>
        <argsstring>(const std::string &amp;name, const Node &amp;node, const Scope &amp;scope)</argsstring>
        <name>readAttribute</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const Node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classopenscenario__interpreter_1_1Scope" kindref="compound">Scope</ref> &amp;</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/attribute.hpp" line="74" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/attribute.hpp" bodystart="74" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="attribute_8hpp_1a068ceef88a5d361b61ada754dc8367ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Node</type>
          </param>
          <param>
            <type>typename Scope</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T openscenario_interpreter::reader::readAttribute</definition>
        <argsstring>(const std::string &amp;name, const Node &amp;node, const Scope &amp;scope, T &amp;&amp;value)</argsstring>
        <name>readAttribute</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const Node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classopenscenario__interpreter_1_1Scope" kindref="compound">Scope</ref> &amp;</type>
          <declname>scope</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/attribute.hpp" line="113" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/attribute.hpp" bodystart="113" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="content_8hpp_1ae2122738b07a5fe07fb875dab26f9f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Node</type>
          </param>
          <param>
            <type>typename Scope</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T openscenario_interpreter::reader::readContent</definition>
        <argsstring>(const Node &amp;node, const Scope &amp;)</argsstring>
        <name>readContent</name>
        <param>
          <type>const Node &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const <ref refid="classopenscenario__interpreter_1_1Scope" kindref="compound">Scope</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/content.hpp" line="28" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/content.hpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="element_8hpp_1a7e5d1fcf30b939044c9eb214287b0435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callee</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void openscenario_interpreter::reader::callWithElements</definition>
        <argsstring>(const XML &amp;parent, const std::string &amp;name, const Cardinality min_occurs, const Cardinality max_occurs, Callee &amp;&amp;call_with)</argsstring>
        <name>callWithElements</name>
        <param>
          <type>const XML &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const Cardinality</type>
          <declname>min_occurs</declname>
        </param>
        <param>
          <type>const Cardinality</type>
          <declname>max_occurs</declname>
        </param>
        <param>
          <type>Callee &amp;&amp;</type>
          <declname>call_with</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" line="48" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" bodystart="48" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="element_8hpp_1a5d921d2100f0ea2de4c5d7f881c9bb05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callee</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) openscenario_interpreter::reader::callWithElement</definition>
        <argsstring>(const XML &amp;parent, const std::string &amp;name, Callee &amp;&amp;call_with)</argsstring>
        <name>callWithElement</name>
        <param>
          <type>const XML &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>Callee &amp;&amp;</type>
          <declname>call_with</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" line="78" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="element_8hpp_1ad998e3ffea33688cf50b9c716ee2e7a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto openscenario_interpreter::reader::readElement</definition>
        <argsstring>(const std::string &amp;name, const XML &amp;parent, Ts &amp;&amp;... xs)</argsstring>
        <name>readElement</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const XML &amp;</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" line="85" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" bodystart="85" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="element_8hpp_1a550b9a398ff252e2347656b84795ba68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Cardinality</type>
            <declname>MinOccurs</declname>
            <defname>MinOccurs</defname>
          </param>
          <param>
            <type>Cardinality</type>
            <declname>MaxOccurs</declname>
            <defname>MaxOccurs</defname>
            <defval>unbounded</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto openscenario_interpreter::reader::readElements</definition>
        <argsstring>(const std::string &amp;name, const XML &amp;node, Ts &amp;&amp;... xs)</argsstring>
        <name>readElements</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const XML &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" line="103" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" bodystart="103" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="element_8hpp_1aeb6b780744670941bb296c5a700a0ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>Cardinality</type>
            <declname>MinOccurs</declname>
            <defname>MinOccurs</defname>
          </param>
          <param>
            <type>Cardinality</type>
            <declname>MaxOccurs</declname>
            <defname>MaxOccurs</defname>
            <defval>unbounded</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto openscenario_interpreter::reader::readElementsAsElement</definition>
        <argsstring>(const std::string &amp;name, const XML &amp;node, Ts &amp;&amp;... xs)</argsstring>
        <name>readElementsAsElement</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const XML &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" line="115" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" bodystart="115" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="element_8hpp_1a96ca2eceebd904187d8e65958fa7c011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) openscenario_interpreter::reader::choice</definition>
        <argsstring>(const XML &amp;node, Ts &amp;&amp;... xs)</argsstring>
        <name>choice</name>
        <param>
          <type>const XML &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>xs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" line="128" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/element.hpp" bodystart="128" bodyend="182"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/openscenario/openscenario_interpreter/include/openscenario_interpreter/reader/attribute.hpp" line="30" column="1"/>
  </compounddef>
</doxygen>
