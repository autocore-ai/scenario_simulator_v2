<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="bounding__box_8cpp" kind="file" language="C++">
    <compoundname>bounding_box.cpp</compoundname>
    <includes local="no">quaternion_operation/quaternion_operation.h</includes>
    <includes refid="bounding__box_8hpp" local="no">traffic_simulator/math/bounding_box.hpp</includes>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="6155">
        <label>traffic_simulator/math/bounding_box.hpp</label>
        <link refid="bounding__box_8hpp_source"/>
        <childnode refid="6156" relation="include">
        </childnode>
        <childnode refid="6157" relation="include">
        </childnode>
        <childnode refid="6158" relation="include">
        </childnode>
        <childnode refid="6159" relation="include">
        </childnode>
        <childnode refid="6160" relation="include">
        </childnode>
        <childnode refid="6161" relation="include">
        </childnode>
        <childnode refid="6162" relation="include">
        </childnode>
        <childnode refid="6163" relation="include">
        </childnode>
        <childnode refid="6164" relation="include">
        </childnode>
        <childnode refid="6165" relation="include">
        </childnode>
      </node>
      <node id="6163">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="6166">
        <label>Eigen/Core</label>
      </node>
      <node id="6164">
        <label>openscenario_msgs/msg/bounding_box.hpp</label>
      </node>
      <node id="6161">
        <label>boost/geometry/geometries/point_xy.hpp</label>
      </node>
      <node id="6156">
        <label>boost/assert.hpp</label>
      </node>
      <node id="6157">
        <label>boost/assign/list_of.hpp</label>
      </node>
      <node id="6154">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="6165">
        <label>vector</label>
      </node>
      <node id="6159">
        <label>boost/geometry/algorithms/disjoint.hpp</label>
      </node>
      <node id="6162">
        <label>boost/optional.hpp</label>
      </node>
      <node id="6160">
        <label>boost/geometry/geometries/linestring.hpp</label>
      </node>
      <node id="6153">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/math/bounding_box.cpp</label>
        <link refid="bounding__box_8cpp"/>
        <childnode refid="6154" relation="include">
        </childnode>
        <childnode refid="6155" relation="include">
        </childnode>
        <childnode refid="6166" relation="include">
        </childnode>
        <childnode refid="6165" relation="include">
        </childnode>
      </node>
      <node id="6158">
        <label>boost/geometry.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetraffic__simulator">traffic_simulator</innernamespace>
    <innernamespace refid="namespacetraffic__simulator_1_1math">traffic_simulator::math</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="bounding__box_8cpp_1a56e1504926ca8dfaa658bed64aa32207" prot="public" static="no">
        <name>EIGEN_MPL2_ONLY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/math/bounding_box.cpp" line="20" column="9" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/math/bounding_box.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quaternion_operation/quaternion_operation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/bounding_box.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>headers<sp/>in<sp/>Eigen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EIGEN_MPL2_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Core&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetraffic__simulator" kindref="compound">traffic_simulator</ref></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">math</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal">boost::optional&lt;double&gt;<sp/>getPolygonDistance(</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>pose0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::BoundingBox<sp/>&amp;<sp/>bbox0,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>pose1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::BoundingBox<sp/>&amp;<sp/>bbox1)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>poly0<sp/>=<sp/>get2DPolygon(pose0,<sp/>bbox0);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>poly1<sp/>=<sp/>get2DPolygon(pose1,<sp/>bbox1);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::geometry::intersects(poly0,<sp/>poly1))<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::geometry::intersects(poly1,<sp/>poly0))<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::geometry::disjoint(poly0,<sp/>poly1))<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::geometry::distance(poly0,<sp/>poly1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::geometry::model::polygon&lt;boost::geometry::model::d2::point_xy&lt;double&gt;&gt;<sp/>get2DPolygon(</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>pose,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::BoundingBox<sp/>&amp;<sp/>bbox)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>points<sp/>=<sp/>transformPoints(pose,<sp/>getPointsFromBbox(bbox));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::geometry::model::d2::point_xy&lt;double&gt;<sp/>bg_point;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>boost::geometry::model::polygon&lt;bg_point&gt;<sp/>poly;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>poly.outer().push_back(bg_point(points[0].x,<sp/>points[0].y));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>poly.outer().push_back(bg_point(points[1].x,<sp/>points[1].y));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>poly.outer().push_back(bg_point(points[2].x,<sp/>points[2].y));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>poly.outer().push_back(bg_point(points[3].x,<sp/>points[3].y));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>poly.outer().push_back(bg_point(points[0].x,<sp/>points[0].y));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>poly;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>getPointsFromBbox(openscenario_msgs::msg::BoundingBox<sp/>bbox)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>points;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>p0.x<sp/>=<sp/>bbox.center.x<sp/>+<sp/>bbox.dimensions.x<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>p0.y<sp/>=<sp/>bbox.center.y<sp/>+<sp/>bbox.dimensions.y<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>p0.z<sp/>=<sp/>bbox.center.z<sp/>+<sp/>bbox.dimensions.z<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>points.emplace_back(p0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p1;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>p1.x<sp/>=<sp/>bbox.center.x<sp/>-<sp/>bbox.dimensions.x<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>p1.y<sp/>=<sp/>bbox.center.y<sp/>+<sp/>bbox.dimensions.y<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>p1.z<sp/>=<sp/>bbox.center.z<sp/>+<sp/>bbox.dimensions.z<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>points.emplace_back(p1);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p2;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>p2.x<sp/>=<sp/>bbox.center.x<sp/>-<sp/>bbox.dimensions.x<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>p2.y<sp/>=<sp/>bbox.center.y<sp/>-<sp/>bbox.dimensions.y<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>p2.z<sp/>=<sp/>bbox.center.z<sp/>+<sp/>bbox.dimensions.z<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>points.emplace_back(p2);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p3;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>p3.x<sp/>=<sp/>bbox.center.x<sp/>+<sp/>bbox.dimensions.x<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>p3.y<sp/>=<sp/>bbox.center.y<sp/>-<sp/>bbox.dimensions.y<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>p3.z<sp/>=<sp/>bbox.center.z<sp/>+<sp/>bbox.dimensions.z<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>points.emplace_back(p3);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>points;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>transformPoints(</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose,<sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>points)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mat<sp/>=<sp/>quaternion_operation::getRotationMatrix(pose.orientation);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>point<sp/>:<sp/>points)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>v(3);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>v(0)<sp/>=<sp/>point.x;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>v(1)<sp/>=<sp/>point.y;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>v(2)<sp/>=<sp/>point.z;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>mat<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>v(0)<sp/>=<sp/>v(0)<sp/>+<sp/>pose.position.x;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>v(1)<sp/>=<sp/>v(1)<sp/>+<sp/>pose.position.y;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>v(2)<sp/>=<sp/>v(2)<sp/>+<sp/>pose.position.z;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>transformed;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>transformed.x<sp/>=<sp/>v(0);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>transformed.y<sp/>=<sp/>v(1);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>transformed.z<sp/>=<sp/>v(2);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.emplace_back(transformed);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>math</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>traffic_simulator</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/math/bounding_box.cpp"/>
  </compounddef>
</doxygen>
