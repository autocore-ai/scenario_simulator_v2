<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ego__entity_8cpp" kind="file" language="C++">
    <compoundname>ego_entity.cpp</compoundname>
    <includes local="no">quaternion_operation/quaternion_operation.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">memory</includes>
    <includes local="no">openscenario_msgs/msg/waypoints_array.hpp</includes>
    <includes local="no">string</includes>
    <includes local="no">system_error</includes>
    <includes local="no">thread</includes>
    <includes refid="ego__entity_8hpp" local="no">traffic_simulator/entity/ego_entity.hpp</includes>
    <includes local="no">tuple</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="5522">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="5605">
        <label>traffic_simulator/vehicle_model/sim_model_time_delay.hpp</label>
        <link refid="sim__model__time__delay_8hpp"/>
        <childnode refid="5606" relation="include">
        </childnode>
        <childnode refid="5602" relation="include">
        </childnode>
        <childnode refid="5603" relation="include">
        </childnode>
        <childnode refid="5565" relation="include">
        </childnode>
        <childnode refid="5528" relation="include">
        </childnode>
        <childnode refid="5604" relation="include">
        </childnode>
        <childnode refid="5607" relation="include">
        </childnode>
      </node>
      <node id="5527">
        <label>traffic_simulator/behavior/route_planner.hpp</label>
        <link refid="route__planner_8hpp_source"/>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5528" relation="include">
        </childnode>
        <childnode refid="5529" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5502">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/entity/ego_entity.cpp</label>
        <link refid="ego__entity_8cpp"/>
        <childnode refid="5503" relation="include">
        </childnode>
        <childnode refid="5504" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5506" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5508" relation="include">
        </childnode>
        <childnode refid="5509" relation="include">
        </childnode>
        <childnode refid="5510" relation="include">
        </childnode>
        <childnode refid="5609" relation="include">
        </childnode>
        <childnode refid="5562" relation="include">
        </childnode>
        <childnode refid="5561" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5563">
        <label>traffic_simulator/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
        <childnode refid="5564" relation="include">
        </childnode>
        <childnode refid="5565" relation="include">
        </childnode>
        <childnode refid="5566" relation="include">
        </childnode>
      </node>
      <node id="5607">
        <label>traffic_simulator/vehicle_model/sim_model_util.hpp</label>
        <link refid="sim__model__util_8hpp_source"/>
        <childnode refid="5608" relation="include">
        </childnode>
      </node>
      <node id="5598">
        <label>boost/property_tree/xml_parser.hpp</label>
      </node>
      <node id="5508">
        <label>system_error</label>
      </node>
      <node id="5521">
        <label>iomanip</label>
      </node>
      <node id="5504">
        <label>functional</label>
      </node>
      <node id="5528">
        <label>queue</label>
      </node>
      <node id="5586">
        <label>limits</label>
      </node>
      <node id="5544">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="5519">
        <label>boost/filesystem/operations.hpp</label>
      </node>
      <node id="5516">
        <label>openscenario_msgs/msg/entity_type.hpp</label>
      </node>
      <node id="5590">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="5571">
        <label>behaviortree_cpp_v3/loggers/bt_cout_logger.h</label>
      </node>
      <node id="5543">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="5506">
        <label>openscenario_msgs/msg/waypoints_array.hpp</label>
      </node>
      <node id="5604">
        <label>traffic_simulator/vehicle_model/sim_model_interface.hpp</label>
        <link refid="sim__model__interface_8hpp"/>
        <childnode refid="5602" relation="include">
        </childnode>
        <childnode refid="5526" relation="include">
        </childnode>
      </node>
      <node id="5537">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="5591">
        <label>traffic_simulator/traffic_lights/traffic_light_phase.hpp</label>
        <link refid="traffic__light__phase_8hpp_source"/>
        <childnode refid="5586" relation="include">
        </childnode>
        <childnode refid="5522" relation="include">
        </childnode>
        <childnode refid="5529" relation="include">
        </childnode>
        <childnode refid="5561" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5532">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="5583">
        <label>autoware_perception_msgs/msg/traffic_light_state_array.hpp</label>
      </node>
      <node id="5577">
        <label>traffic_simulator/behavior/action_node.hpp</label>
        <link refid="action__node_8hpp_source"/>
        <childnode refid="5576" relation="include">
        </childnode>
        <childnode refid="5578" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5572" relation="include">
        </childnode>
        <childnode refid="5506" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5579" relation="include">
        </childnode>
        <childnode refid="5529" relation="include">
        </childnode>
        <childnode refid="5592" relation="include">
        </childnode>
        <childnode refid="5553" relation="include">
        </childnode>
        <childnode refid="5582" relation="include">
        </childnode>
        <childnode refid="5562" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5568">
        <label>traffic_simulator/behavior/target_speed_planner.hpp</label>
        <link refid="target__speed__planner_8hpp_source"/>
        <childnode refid="5513" relation="include">
        </childnode>
      </node>
      <node id="5549">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="5599">
        <label>pugixml.hpp</label>
      </node>
      <node id="5564">
        <label>autoware_perception_msgs/msg/lamp_state.hpp</label>
      </node>
      <node id="5596">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="5557">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="5595">
        <label>openscenario_msgs.pb.h</label>
      </node>
      <node id="5515">
        <label>concealer/autoware_auto.hpp</label>
      </node>
      <node id="5525">
        <label>openscenario_msgs/msg/vehicle_parameters.hpp</label>
      </node>
      <node id="5588">
        <label>cassert</label>
      </node>
      <node id="5566">
        <label>stdexcept</label>
      </node>
      <node id="5603">
        <label>eigen3/Eigen/LU</label>
      </node>
      <node id="5570">
        <label>behaviortree_cpp_v3/bt_factory.h</label>
      </node>
      <node id="5507">
        <label>string</label>
      </node>
      <node id="5572">
        <label>openscenario_msgs/msg/obstacle.hpp</label>
      </node>
      <node id="5547">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="5550">
        <label>traffic_simulator/hdmap_utils/cache.hpp</label>
        <link refid="cache_8hpp_source"/>
        <childnode refid="5513" relation="include">
        </childnode>
        <childnode refid="5551" relation="include">
        </childnode>
        <childnode refid="5552" relation="include">
        </childnode>
        <childnode refid="5522" relation="include">
        </childnode>
        <childnode refid="5553" relation="include">
        </childnode>
        <childnode refid="5562" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5548">
        <label>map</label>
      </node>
      <node id="5555">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="5556" relation="include">
        </childnode>
        <childnode refid="5503" relation="include">
        </childnode>
        <childnode refid="5513" relation="include">
        </childnode>
        <childnode refid="5551" relation="include">
        </childnode>
        <childnode refid="5557" relation="include">
        </childnode>
        <childnode refid="5558" relation="include">
        </childnode>
        <childnode refid="5559" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5587">
        <label>traffic_simulator/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="5588" relation="include">
        </childnode>
        <childnode refid="5589" relation="include">
        </childnode>
        <childnode refid="5548" relation="include">
        </childnode>
        <childnode refid="5590" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
      </node>
      <node id="5581">
        <label>openscenario_msgs/msg/bounding_box.hpp</label>
      </node>
      <node id="5594">
        <label>traffic_simulator/entity/vehicle_parameter.hpp</label>
        <link refid="vehicle__parameter_8hpp_source"/>
        <childnode refid="5595" relation="include">
        </childnode>
        <childnode refid="5596" relation="include">
        </childnode>
        <childnode refid="5597" relation="include">
        </childnode>
        <childnode refid="5598" relation="include">
        </childnode>
        <childnode refid="5558" relation="include">
        </childnode>
        <childnode refid="5581" relation="include">
        </childnode>
        <childnode refid="5525" relation="include">
        </childnode>
        <childnode refid="5599" relation="include">
        </childnode>
        <childnode refid="5526" relation="include">
        </childnode>
        <childnode refid="5600" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
      </node>
      <node id="5526">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="5536">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="5573">
        <label>traffic_simulator/behavior/vehicle/lane_change_action.hpp</label>
        <link refid="lane__change__action_8hpp_source"/>
        <childnode refid="5574" relation="include">
        </childnode>
        <childnode refid="5570" relation="include">
        </childnode>
        <childnode refid="5513" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5549" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5575" relation="include">
        </childnode>
        <childnode refid="5594" relation="include">
        </childnode>
        <childnode refid="5555" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5514">
        <label>concealer/autoware_architecture_proposal.hpp</label>
      </node>
      <node id="5541">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="5529">
        <label>traffic_simulator/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="5530" relation="include">
        </childnode>
        <childnode refid="5531" relation="include">
        </childnode>
        <childnode refid="5532" relation="include">
        </childnode>
        <childnode refid="5533" relation="include">
        </childnode>
        <childnode refid="5534" relation="include">
        </childnode>
        <childnode refid="5535" relation="include">
        </childnode>
        <childnode refid="5536" relation="include">
        </childnode>
        <childnode refid="5537" relation="include">
        </childnode>
        <childnode refid="5538" relation="include">
        </childnode>
        <childnode refid="5539" relation="include">
        </childnode>
        <childnode refid="5540" relation="include">
        </childnode>
        <childnode refid="5541" relation="include">
        </childnode>
        <childnode refid="5542" relation="include">
        </childnode>
        <childnode refid="5512" relation="include">
        </childnode>
        <childnode refid="5513" relation="include">
        </childnode>
        <childnode refid="5543" relation="include">
        </childnode>
        <childnode refid="5544" relation="include">
        </childnode>
        <childnode refid="5545" relation="include">
        </childnode>
        <childnode refid="5546" relation="include">
        </childnode>
        <childnode refid="5547" relation="include">
        </childnode>
        <childnode refid="5548" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5549" relation="include">
        </childnode>
        <childnode refid="5526" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5550" relation="include">
        </childnode>
        <childnode refid="5555" relation="include">
        </childnode>
        <childnode refid="5563" relation="include">
        </childnode>
        <childnode refid="5562" relation="include">
        </childnode>
        <childnode refid="5561" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
        <childnode refid="5567" relation="include">
        </childnode>
      </node>
      <node id="5554">
        <label>exception</label>
      </node>
      <node id="5592">
        <label>traffic_simulator/helper/stop_watch.hpp</label>
        <link refid="stop__watch_8hpp_source"/>
        <childnode refid="5513" relation="include">
        </childnode>
        <childnode refid="5593" relation="include">
        </childnode>
        <childnode refid="5565" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
      </node>
      <node id="5530">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="5558">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="5524">
        <label>openscenario_msgs/msg/driver_model.hpp</label>
      </node>
      <node id="5585">
        <label>autoware_perception_msgs/msg/traffic_light_state.hpp</label>
      </node>
      <node id="5535">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="5546">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="5503">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="5576">
        <label>behaviortree_cpp_v3/action_node.h</label>
      </node>
      <node id="5545">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="5551">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="5518">
        <label>ament_index_cpp/get_package_share_directory.hpp</label>
      </node>
      <node id="5589">
        <label>cstdio</label>
      </node>
      <node id="5609">
        <label>tuple</label>
      </node>
      <node id="5578">
        <label>boost/algorithm/clamp.hpp</label>
      </node>
      <node id="5560">
        <label>vector</label>
      </node>
      <node id="5512">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="5556">
        <label>gtest/gtest.h</label>
      </node>
      <node id="5523">
        <label>traffic_simulator/entity/vehicle_entity.hpp</label>
        <link refid="vehicle__entity_8hpp_source"/>
        <childnode refid="5524" relation="include">
        </childnode>
        <childnode refid="5525" relation="include">
        </childnode>
        <childnode refid="5506" relation="include">
        </childnode>
        <childnode refid="5526" relation="include">
        </childnode>
        <childnode refid="5527" relation="include">
        </childnode>
        <childnode refid="5568" relation="include">
        </childnode>
        <childnode refid="5569" relation="include">
        </childnode>
        <childnode refid="5573" relation="include">
        </childnode>
        <childnode refid="5579" relation="include">
        </childnode>
        <childnode refid="5594" relation="include">
        </childnode>
        <childnode refid="5513" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5599" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5580">
        <label>autoware_vehicle_msgs/msg/vehicle_command.hpp</label>
      </node>
      <node id="5561">
        <label>utility</label>
      </node>
      <node id="5600">
        <label>sstream</label>
      </node>
      <node id="5569">
        <label>traffic_simulator/behavior/vehicle/behavior_tree.hpp</label>
        <link refid="vehicle_2behavior__tree_8hpp_source"/>
        <childnode refid="5570" relation="include">
        </childnode>
        <childnode refid="5571" relation="include">
        </childnode>
        <childnode refid="5504" relation="include">
        </childnode>
        <childnode refid="5551" relation="include">
        </childnode>
        <childnode refid="5548" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5549" relation="include">
        </childnode>
        <childnode refid="5572" relation="include">
        </childnode>
        <childnode refid="5506" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5529" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5559">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5520">
        <label>boost/range/iterator_range.hpp</label>
      </node>
      <node id="5608">
        <label>math.h</label>
      </node>
      <node id="5539">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="5510">
        <label>traffic_simulator/entity/ego_entity.hpp</label>
        <link refid="ego__entity_8hpp_source"/>
        <childnode refid="5511" relation="include">
        </childnode>
        <childnode refid="5512" relation="include">
        </childnode>
        <childnode refid="5513" relation="include">
        </childnode>
        <childnode refid="5514" relation="include">
        </childnode>
        <childnode refid="5515" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5516" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5517" relation="include">
        </childnode>
        <childnode refid="5523" relation="include">
        </childnode>
        <childnode refid="5601" relation="include">
        </childnode>
        <childnode refid="5605" relation="include">
        </childnode>
        <childnode refid="5562" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5553">
        <label>traffic_simulator/math/catmull_rom_spline.hpp</label>
        <link refid="catmull__rom__spline_8hpp_source"/>
        <childnode refid="5554" relation="include">
        </childnode>
        <childnode refid="5551" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5555" relation="include">
        </childnode>
        <childnode refid="5561" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5534">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="5597">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="5565">
        <label>iostream</label>
      </node>
      <node id="5575">
        <label>traffic_simulator/behavior/vehicle/vehicle_action_node.hpp</label>
        <link refid="vehicle__action__node_8hpp_source"/>
        <childnode refid="5576" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5524" relation="include">
        </childnode>
        <childnode refid="5572" relation="include">
        </childnode>
        <childnode refid="5525" relation="include">
        </childnode>
        <childnode refid="5506" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5577" relation="include">
        </childnode>
        <childnode refid="5594" relation="include">
        </childnode>
        <childnode refid="5592" relation="include">
        </childnode>
        <childnode refid="5553" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5531">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="5606">
        <label>deque</label>
      </node>
      <node id="5584">
        <label>traffic_simulator/traffic_lights/traffic_light.hpp</label>
        <link refid="traffic__light_8hpp_source"/>
        <childnode refid="5585" relation="include">
        </childnode>
        <childnode refid="5565" relation="include">
        </childnode>
        <childnode refid="5586" relation="include">
        </childnode>
        <childnode refid="5566" relation="include">
        </childnode>
        <childnode refid="5587" relation="include">
        </childnode>
        <childnode refid="5591" relation="include">
        </childnode>
        <childnode refid="5563" relation="include">
        </childnode>
        <childnode refid="5562" relation="include">
        </childnode>
        <childnode refid="5561" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
      </node>
      <node id="5582">
        <label>traffic_simulator/traffic_lights/traffic_light_manager.hpp</label>
        <link refid="traffic__light__manager_8hpp_source"/>
        <childnode refid="5583" relation="include">
        </childnode>
        <childnode refid="5521" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5526" relation="include">
        </childnode>
        <childnode refid="5566" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5529" relation="include">
        </childnode>
        <childnode refid="5584" relation="include">
        </childnode>
        <childnode refid="5562" relation="include">
        </childnode>
        <childnode refid="5561" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
        <childnode refid="5567" relation="include">
        </childnode>
      </node>
      <node id="5562">
        <label>unordered_map</label>
      </node>
      <node id="5542">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="5574">
        <label>behaviortree_cpp_v3/behavior_tree.h</label>
      </node>
      <node id="5567">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="5579">
        <label>traffic_simulator/entity/entity_base.hpp</label>
        <link refid="entity__base_8hpp_source"/>
        <childnode refid="5580" relation="include">
        </childnode>
        <childnode refid="5513" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5581" relation="include">
        </childnode>
        <childnode refid="5524" relation="include">
        </childnode>
        <childnode refid="5549" relation="include">
        </childnode>
        <childnode refid="5516" relation="include">
        </childnode>
        <childnode refid="5572" relation="include">
        </childnode>
        <childnode refid="5525" relation="include">
        </childnode>
        <childnode refid="5506" relation="include">
        </childnode>
        <childnode refid="5528" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5529" relation="include">
        </childnode>
        <childnode refid="5582" relation="include">
        </childnode>
        <childnode refid="5562" relation="include">
        </childnode>
        <childnode refid="5560" relation="include">
        </childnode>
        <childnode refid="5567" relation="include">
        </childnode>
      </node>
      <node id="5552">
        <label>mutex</label>
      </node>
      <node id="5533">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="5538">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="5593">
        <label>chrono</label>
      </node>
      <node id="5602">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="5513">
        <label>boost/optional.hpp</label>
      </node>
      <node id="5540">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="5509">
        <label>thread</label>
      </node>
      <node id="5601">
        <label>traffic_simulator/vehicle_model/sim_model_ideal.hpp</label>
        <link refid="sim__model__ideal_8hpp"/>
        <childnode refid="5602" relation="include">
        </childnode>
        <childnode refid="5603" relation="include">
        </childnode>
        <childnode refid="5565" relation="include">
        </childnode>
        <childnode refid="5604" relation="include">
        </childnode>
      </node>
      <node id="5511">
        <label>algorithm</label>
      </node>
      <node id="5505">
        <label>memory</label>
      </node>
      <node id="5517">
        <label>traffic_simulator/api/configuration.hpp</label>
        <link refid="configuration_8hpp_source"/>
        <childnode refid="5511" relation="include">
        </childnode>
        <childnode refid="5518" relation="include">
        </childnode>
        <childnode refid="5512" relation="include">
        </childnode>
        <childnode refid="5519" relation="include">
        </childnode>
        <childnode refid="5520" relation="include">
        </childnode>
        <childnode refid="5521" relation="include">
        </childnode>
        <childnode refid="5522" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetraffic__simulator">traffic_simulator</innernamespace>
    <innernamespace refid="namespacetraffic__simulator_1_1entity">traffic_simulator::entity</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="ego__entity_8cpp_1a9c8f164b1af96f53e82a3e558461f33f" prot="public" static="no">
        <name>BOILERPLATE</name>
        <param><defname>IDENTIFIER</defname></param>
        <initializer>case VehicleModelType::IDENTIFIER: \
    return #IDENTIFIER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/entity/ego_entity.cpp" line="35" column="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quaternion_operation/quaternion_operation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openscenario_msgs/msg/waypoints_array.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;system_error&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/entity/ego_entity.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetraffic__simulator" kindref="compound">traffic_simulator</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">entity</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VehicleModelType<sp/>datum)<sp/>-&gt;<sp/>std::string</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BOILERPLATE(IDENTIFIER)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/>case<sp/>VehicleModelType::IDENTIFIER:<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>#IDENTIFIER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(datum)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>BOILERPLATE(CONST_ACCEL_TWIST);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>BOILERPLATE(DELAY_FORKLIFT_RLS);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>BOILERPLATE(DELAY_STEER);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>BOILERPLATE(DELAY_STEER_ACC);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>BOILERPLATE(DELAY_TWIST);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>BOILERPLATE(IDEAL_ACCEL);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>BOILERPLATE(IDEAL_FORKLIFT_RLS);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>BOILERPLATE(IDEAL_STEER);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>BOILERPLATE(IDEAL_TWIST);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BOILERPLATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>vehicle<sp/>model<sp/>type,<sp/>failed<sp/>to<sp/>convert<sp/>to<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getVehicleModelType()</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>architecture_type<sp/>=<sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;architecture-type&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>std::string<sp/>vehicle_model_type;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(architecture_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tier4/proposal&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_model_type<sp/>=<sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;vehicle_model_type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IDEAL_STEER&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(architecture_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;awf/auto&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hard-coded<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>would<sp/>require<sp/>changes<sp/>in<sp/>https://github.com/tier4/lexus_description.iv.universe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_model_type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;IDEAL_STEER&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>architecture-type<sp/>&quot;</highlight><highlight class="normal">,<sp/>architecture_type);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vehicle_model_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;IDEAL_STEER&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VehicleModelType::IDEAL_STEER;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vehicle_model_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DELAY_STEER&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VehicleModelType::DELAY_STEER;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vehicle_model_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;DELAY_STEER_ACC&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VehicleModelType::DELAY_STEER_ACC;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;Unsupported<sp/>vehicle_model_type<sp/>&quot;</highlight><highlight class="normal">,<sp/>vehicle_model_type,<sp/></highlight><highlight class="stringliteral">&quot;specified&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeSimulationModel(</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VehicleModelType<sp/>vehicle_model_type,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time,<sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::VehicleParameters<sp/>&amp;<sp/>parameters)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;SimModelInterface&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vehicle_model_type)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VehicleModelType::IDEAL_STEER:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;SimModelIdealSteer&gt;(getParameter&lt;double&gt;(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wheel_base&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters.axles.front_axle.position_x<sp/>-<sp/>parameters.axles.rear_axle.position_x));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VehicleModelType::DELAY_STEER:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;SimModelTimeDelaySteer&gt;(</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;vel_lim&quot;</highlight><highlight class="normal">,<sp/>50.0),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parameters.performance.max_speed,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;steer_lim&quot;</highlight><highlight class="normal">,<sp/>1.0),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parameters.axles.front_axle.max_steering,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;accel_rate&quot;</highlight><highlight class="normal">,<sp/>10.0),<sp/><sp/></highlight><highlight class="comment">//<sp/>parameters.performance.max_acceleration,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;steer_rate_lim&quot;</highlight><highlight class="normal">,<sp/>5.0),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wheel_base&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters.axles.front_axle.position_x<sp/>-<sp/>parameters.axles.rear_axle.position_x),<sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step_time,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;vel_time_delay&quot;</highlight><highlight class="normal">,<sp/>0.1),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;vel_time_constant&quot;</highlight><highlight class="normal">,<sp/>0.1),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;steer_time_delay&quot;</highlight><highlight class="normal">,<sp/>0.3),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;steer_time_constant&quot;</highlight><highlight class="normal">,<sp/>0.3),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;deadzone_delta_steer&quot;</highlight><highlight class="normal">,<sp/>0.0));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VehicleModelType::DELAY_STEER_ACC:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;SimModelTimeDelaySteerAccel&gt;(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;vel_lim&quot;</highlight><highlight class="normal">,<sp/>50.0),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parameters.performance.max_speed,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;steer_lim&quot;</highlight><highlight class="normal">,<sp/>1.0),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parameters.axles.front_axle.max_steering,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;accel_rate&quot;</highlight><highlight class="normal">,<sp/>10.0),<sp/><sp/></highlight><highlight class="comment">//<sp/>parameters.performance.max_acceleration,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;steer_rate_lim&quot;</highlight><highlight class="normal">,<sp/>5.0),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wheel_base&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters.axles.front_axle.position_x<sp/>-<sp/>parameters.axles.rear_axle.position_x),<sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step_time,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;acc_time_delay&quot;</highlight><highlight class="normal">,<sp/>0.1),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;acc_time_constant&quot;</highlight><highlight class="normal">,<sp/>0.1),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;steer_time_delay&quot;</highlight><highlight class="normal">,<sp/>0.3),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;steer_time_constant&quot;</highlight><highlight class="normal">,<sp/>0.3),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;deadzone_delta_steer&quot;</highlight><highlight class="normal">,<sp/>0.0));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>vehicle_model_type<sp/>&quot;</highlight><highlight class="normal">,<sp/>toString(vehicle_model_type),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>specified&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeAutoware(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Configuration<sp/>&amp;<sp/>configuration)<sp/>-&gt;<sp/>std::unique_ptr&lt;concealer::Autoware&gt;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>architecture_type<sp/>=<sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;architecture-type&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(architecture_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tier4/proposal&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;concealer::AutowareArchitectureProposal&gt;(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;autoware_launch_package&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;autoware_launch_file&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;map_path:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>configuration.map_path.string(),</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lanelet2_map_file:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>configuration.getLanelet2MapFile(),</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pointcloud_map_file:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>configuration.getPointCloudMapFile(),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sensor_model:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;sensor_model&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vehicle_model:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;vehicle_model&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rviz_config:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>configuration.rviz_config_path.string(),<sp/></highlight><highlight class="stringliteral">&quot;scenario_simulation:=true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(architecture_type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;awf/auto&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;concealer::AutowareAuto&gt;(</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;autoware_launch_package&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;autoware_launch_file&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;map_path:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>configuration.map_path.string(),</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;lanelet2_map_file:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>configuration.getLanelet2MapFile(),</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pointcloud_map_file:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>configuration.getPointCloudMapFile(),</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sensor_model:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;sensor_model&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;vehicle_model:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;vehicle_model&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rviz_config:=&quot;</highlight><highlight class="normal"><sp/>+<sp/>configuration.rviz_config_path.string(),<sp/></highlight><highlight class="stringliteral">&quot;scenario_simulation:=true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>architecture-type<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>architecture_type);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">EgoEntity::EgoEntity(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Configuration<sp/>&amp;<sp/>configuration,<sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::VehicleParameters<sp/>&amp;<sp/>parameters)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">:<sp/>VehicleEntity(name,<sp/>parameters),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>autoware(makeAutoware(configuration)),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>vehicle_model_type_(getVehicleModelType()),</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>vehicle_model_ptr_(makeSimulationModel(vehicle_model_type_,<sp/>step_time,<sp/>parameters))</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>entity_type_.type<sp/>=<sp/>openscenario_msgs::msg::EntityType::EGO;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EgoEntity::engage()<sp/>{<sp/>autoware-&gt;engage();<sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EgoEntity::getVehicleCommand()<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>autoware_vehicle_msgs::msg::VehicleCommand</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>autoware-&gt;getVehicleCommand();</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EgoEntity::getCurrentAction()<sp/>const<sp/>-&gt;<sp/>const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>state{autoware-&gt;getAutowareStateMessage()};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>message<sp/>&lt;&lt;<sp/>(state.empty()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;Starting&quot;</highlight><highlight class="normal"><sp/>:<sp/>state)<sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;_(t_=_&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::fixed<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setprecision(2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(status_<sp/>?<sp/>status_-&gt;time<sp/>:<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message.str();</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EgoEntity::getEntityStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityStatus</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>rpy;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>rpy.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>rpy.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>rpy.z<sp/>=<sp/>vehicle_model_ptr_-&gt;getYaw();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>pose.position.x<sp/>=<sp/>vehicle_model_ptr_-&gt;getX();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>pose.position.y<sp/>=<sp/>vehicle_model_ptr_-&gt;getY();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>pose.position.z<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>pose.orientation<sp/>=<sp/>quaternion_operation::convertEulerAngleToQuaternion(rpy);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Twist<sp/>twist;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>twist.linear.x<sp/>=<sp/>vehicle_model_ptr_-&gt;getVx();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>twist.angular.z<sp/>=<sp/>vehicle_model_ptr_-&gt;getWz();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Accel<sp/>accel;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(previous_angular_velocity_<sp/>&amp;&amp;<sp/>previous_linear_velocity_)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accel.linear.x<sp/>=<sp/>(twist.linear.x<sp/>-<sp/>previous_linear_velocity_.get())<sp/>/<sp/>step_time;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accel.angular.z<sp/>=<sp/>(twist.angular.z<sp/>-<sp/>previous_angular_velocity_.get())<sp/>/<sp/>step_time;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>v(3);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>v(0)<sp/>=<sp/>pose.position.x;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>v(1)<sp/>=<sp/>pose.position.y;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>v(2)<sp/>=<sp/>pose.position.z;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>quaternion_operation::getRotationMatrix((*initial_pose_).orientation)<sp/>*<sp/>v;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>status;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>status.time<sp/>=<sp/>time;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>status.type.type<sp/>=<sp/>entity_type_.type;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>status.bounding_box<sp/>=<sp/>getBoundingBox();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>status.action_status.twist<sp/>=<sp/>twist;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>status.action_status.accel<sp/>=<sp/>accel;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>status.pose.position.x<sp/>=<sp/>v(0)<sp/>+<sp/>initial_pose_.get().position.x;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>status.pose.position.y<sp/>=<sp/>v(1)<sp/>+<sp/>initial_pose_.get().position.y;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>status.pose.position.z<sp/>=<sp/>v(2)<sp/>+<sp/>initial_pose_.get().position.z;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>closest_lanelet_id<sp/>=<sp/>hdmap_utils_ptr_-&gt;getClosetLaneletId(status.pose);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!closest_lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>find<sp/>the<sp/>closest<sp/>lane,<sp/>lane<sp/>is<sp/>too<sp/>far<sp/>away.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref><sp/>spline(</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hdmap_utils_ptr_-&gt;getCenterPoints(closest_lanelet_id.get()));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_value<sp/>=<sp/>spline.getSValue(status.pose.position))<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status.pose.position.z<sp/>=<sp/>spline.getPoint(s_value.get()).z;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>status.pose.orientation<sp/>=<sp/>initial_pose_.get().orientation<sp/>*<sp/>pose.orientation;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet_pose<sp/>=<sp/>hdmap_utils_ptr_-&gt;toLaneletPose(status.pose);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>status.lanelet_pose_valid<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lanelet_pose);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status.lanelet_pose_valid)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status.lanelet_pose<sp/>=<sp/>lanelet_pose.get();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EgoEntity::getEntityTypename()<sp/>const<sp/>-&gt;<sp/>const<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;EgoEntity&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EgoEntity::getObstacle()<sp/>-&gt;<sp/>boost::optional&lt;openscenario_msgs::msg::Obstacle&gt;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EgoEntity::getWaypoints()<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::WaypointsArray</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>autoware-&gt;getWaypoints();</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EgoEntity::onUpdate(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_time,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>EntityBase::onUpdate(current_time,<sp/>step_time);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_time<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>updateEntityStatusTimestamp(current_time);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Pose<sp/>current_pose;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::Vector3<sp/>rpy;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpy.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpy.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpy.z<sp/>=<sp/>vehicle_model_ptr_-&gt;getYaw();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_pose.position.x<sp/>=<sp/>(*vehicle_model_ptr_).getX()<sp/>+<sp/>initial_pose_.get().position.x;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_pose.position.y<sp/>=<sp/>(*vehicle_model_ptr_).getY()<sp/>+<sp/>initial_pose_.get().position.y;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_pose.position.z<sp/>=<sp/></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"><sp/>initial_pose_.get().position.z;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_pose.orientation<sp/>=</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_pose_.get().orientation<sp/>*<sp/>quaternion_operation::convertEulerAngleToQuaternion(rpy);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>autoware-&gt;set(current_pose);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Twist<sp/>current_twist;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_twist.linear.x<sp/>=<sp/>(*vehicle_model_ptr_).getVx();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_twist.angular.z<sp/>=<sp/>(*vehicle_model_ptr_).getWz();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>autoware-&gt;set(current_twist);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vehicle_model_type_)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VehicleModelType::IDEAL_STEER:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VehicleModelType::DELAY_STEER:<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>input(2);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>&lt;&lt;<sp/>autoware-&gt;getVelocity(),<sp/>autoware-&gt;getSteeringAngle();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*vehicle_model_ptr_).setInput(input);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VehicleModelType::DELAY_STEER_ACC:<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>input(3);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>&lt;&lt;<sp/>autoware-&gt;getAcceleration(),<sp/>autoware-&gt;getSteeringAngle(),<sp/>autoware-&gt;getGearSign();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*vehicle_model_ptr_).setInput(input);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>vehicle_model_type<sp/>&quot;</highlight><highlight class="normal">,<sp/>toString(vehicle_model_type_),<sp/></highlight><highlight class="stringliteral">&quot;specified&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>(*vehicle_model_ptr_).update(step_time);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>setStatus(getEntityStatus(current_time<sp/>+<sp/>step_time,<sp/>step_time));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(previous_linear_velocity_)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linear_jerk_<sp/>=<sp/>(vehicle_model_ptr_-&gt;getVx()<sp/>-<sp/>previous_linear_velocity_.get())<sp/>/<sp/>step_time;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linear_jerk_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>previous_linear_velocity_<sp/>=<sp/>vehicle_model_ptr_-&gt;getVx();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>previous_angular_velocity_<sp/>=<sp/>vehicle_model_ptr_-&gt;getWz();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EgoEntity::ready()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>Autoware::ready()<sp/>will<sp/>notify<sp/>you<sp/>with<sp/>an<sp/>exception<sp/>if<sp/>Autoware<sp/>has<sp/>detected<sp/>any<sp/>anomalies<sp/>at<sp/>the<sp/>time<sp/>of<sp/>the<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>autoware-&gt;ready();</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EgoEntity::requestAcquirePosition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::LaneletPose<sp/>&amp;<sp/>lanelet_pose)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>requestAssignRoute({lanelet_pose});</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EgoEntity::requestAcquirePosition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>map_pose)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>requestAssignRoute({map_pose});</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EgoEntity::requestAssignRoute(</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;openscenario_msgs::msg::LaneletPose&gt;<sp/>&amp;<sp/>waypoints)</highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Pose&gt;<sp/>route;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>waypoint<sp/>:<sp/>waypoints)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>route.push_back((*hdmap_utils_ptr_).toMapPose(waypoint).pose);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>requestAssignRoute(route);</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EgoEntity::requestAssignRoute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::msg::Pose&gt;<sp/>&amp;<sp/>waypoints)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::PoseStamped&gt;<sp/>route;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>waypoint<sp/>:<sp/>waypoints)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::PoseStamped<sp/>pose_stamped;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pose_stamped.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pose_stamped.pose<sp/>=<sp/>waypoint;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>route.push_back(pose_stamped);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>autoware-&gt;initialized())<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>autoware-&gt;initialize(getStatus().pose);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>autoware-&gt;plan(route);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>engage()<sp/>will<sp/>be<sp/>executed<sp/>at<sp/>simulation-time<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>autoware-&gt;plan(route);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>autoware-&gt;engage();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EgoEntity::requestLaneChange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;From<sp/>scenario,<sp/>a<sp/>lane<sp/>change<sp/>was<sp/>requested<sp/>to<sp/>Ego<sp/>type<sp/>entity<sp/>&quot;</highlight><highlight class="normal">,<sp/>std::quoted(name),</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>In<sp/>general,<sp/>such<sp/>a<sp/>request<sp/>is<sp/>an<sp/>error,<sp/>since<sp/>Ego<sp/>cars<sp/>make<sp/>autonomous<sp/>decisions<sp/>about<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;everything<sp/>but<sp/>their<sp/>destination&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EgoEntity::setStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityStatus<sp/>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>VehicleEntity::setStatus(status);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>setStatus<sp/>always<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_pose<sp/>=<sp/>getStatus().pose;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(autoware-&gt;initialized())<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Twist<sp/>current_twist;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_twist.linear.x<sp/>=<sp/>(*vehicle_model_ptr_).getVx();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_twist.angular.z<sp/>=<sp/>(*vehicle_model_ptr_).getWz();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>autoware-&gt;set(current_pose);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>autoware-&gt;set(current_twist);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initial_pose_)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>initial_pose_<sp/>=<sp/>current_pose;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EgoEntity::setTargetSpeed(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vehicle_model_type_)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VehicleModelType::IDEAL_STEER:<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>v(3);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>&lt;&lt;<sp/>0,<sp/>0,<sp/>0;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*vehicle_model_ptr_).setState(v);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VehicleModelType::DELAY_STEER:<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>v(5);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>&lt;&lt;<sp/>0,<sp/>0,<sp/>0,<sp/>autoware-&gt;restrictTargetSpeed(value),<sp/>0;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*vehicle_model_ptr_).setState(v);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>VehicleModelType::DELAY_STEER_ACC:<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::VectorXd<sp/>v(6);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>&lt;&lt;<sp/>0,<sp/>0,<sp/>0,<sp/>autoware-&gt;restrictTargetSpeed(value),<sp/>0,<sp/>0;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*vehicle_model_ptr_).setState(v);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>simulation<sp/>model<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getParameter&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;vehicle_model_type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IDEAL_STEER&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;specified&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>traffic_simulator</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/entity/ego_entity.cpp"/>
  </compounddef>
</doxygen>
