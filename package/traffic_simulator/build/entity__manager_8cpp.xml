<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="entity__manager_8cpp" kind="file" language="C++">
    <compoundname>entity_manager.cpp</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">queue</includes>
    <includes local="no">scenario_simulator_exception/exception.hpp</includes>
    <includes local="no">sstream</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes refid="entity__manager_8hpp" local="no">traffic_simulator/entity/entity_manager.hpp</includes>
    <includes refid="helper_8hpp" local="no">traffic_simulator/helper/helper.hpp</includes>
    <includes refid="bounding__box_8hpp" local="no">traffic_simulator/math/bounding_box.hpp</includes>
    <includes refid="collision_8hpp" local="no">traffic_simulator/math/collision.hpp</includes>
    <includes refid="transfrom_8hpp" local="no">traffic_simulator/math/transfrom.hpp</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="5808">
        <label>traffic_simulator/math/bounding_box.hpp</label>
        <link refid="bounding__box_8hpp_source"/>
        <childnode refid="5809" relation="include">
        </childnode>
        <childnode refid="5810" relation="include">
        </childnode>
        <childnode refid="5811" relation="include">
        </childnode>
        <childnode refid="5812" relation="include">
        </childnode>
        <childnode refid="5813" relation="include">
        </childnode>
        <childnode refid="5814" relation="include">
        </childnode>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5741" relation="include">
        </childnode>
        <childnode refid="5694" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5684">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="5786">
        <label>traffic_simulator/vehicle_model/sim_model_time_delay.hpp</label>
        <link refid="sim__model__time__delay_8hpp"/>
        <childnode refid="5787" relation="include">
        </childnode>
        <childnode refid="5783" relation="include">
        </childnode>
        <childnode refid="5784" relation="include">
        </childnode>
        <childnode refid="5749" relation="include">
        </childnode>
        <childnode refid="5683" relation="include">
        </childnode>
        <childnode refid="5785" relation="include">
        </childnode>
        <childnode refid="5788" relation="include">
        </childnode>
      </node>
      <node id="5712">
        <label>traffic_simulator/behavior/route_planner.hpp</label>
        <link refid="route__planner_8hpp_source"/>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5683" relation="include">
        </childnode>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5747">
        <label>traffic_simulator/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
        <childnode refid="5748" relation="include">
        </childnode>
        <childnode refid="5749" relation="include">
        </childnode>
        <childnode refid="5686" relation="include">
        </childnode>
      </node>
      <node id="5788">
        <label>traffic_simulator/vehicle_model/sim_model_util.hpp</label>
        <link refid="sim__model__util_8hpp_source"/>
        <childnode refid="5789" relation="include">
        </childnode>
      </node>
      <node id="5780">
        <label>boost/property_tree/xml_parser.hpp</label>
      </node>
      <node id="5755">
        <label>functional</label>
      </node>
      <node id="5705">
        <label>iomanip</label>
      </node>
      <node id="5683">
        <label>queue</label>
      </node>
      <node id="5798">
        <label>traffic_simulator/behavior/pedestrian/walk_straight_action.hpp</label>
        <link refid="walk__straight__action_8hpp"/>
        <childnode refid="5758" relation="include">
        </childnode>
        <childnode refid="5753" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5732" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5796" relation="include">
        </childnode>
        <childnode refid="5797" relation="include">
        </childnode>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5681">
        <label>limits</label>
      </node>
      <node id="5727">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="5703">
        <label>boost/filesystem/operations.hpp</label>
      </node>
      <node id="5709">
        <label>openscenario_msgs/msg/entity_type.hpp</label>
      </node>
      <node id="5772">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="5754">
        <label>behaviortree_cpp_v3/loggers/bt_cout_logger.h</label>
      </node>
      <node id="5794">
        <label>traffic_simulator/behavior/pedestrian/behavior_tree.hpp</label>
        <link refid="pedestrian_2behavior__tree_8hpp_source"/>
        <childnode refid="5753" relation="include">
        </childnode>
        <childnode refid="5754" relation="include">
        </childnode>
        <childnode refid="5755" relation="include">
        </childnode>
        <childnode refid="5734" relation="include">
        </childnode>
        <childnode refid="5731" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5732" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5795" relation="include">
        </childnode>
        <childnode refid="5798" relation="include">
        </childnode>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5799">
        <label>traffic_simulator/traffic/traffic_sink.hpp</label>
        <link refid="traffic__sink_8hpp"/>
        <childnode refid="5755" relation="include">
        </childnode>
        <childnode refid="5741" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5800" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5726">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="5680">
        <label>cstdint</label>
      </node>
      <node id="5791">
        <label>openscenario_msgs/msg/misc_object_parameters.hpp</label>
      </node>
      <node id="5711">
        <label>openscenario_msgs/msg/waypoints_array.hpp</label>
      </node>
      <node id="5802">
        <label>traffic_simulator/helper/helper.hpp</label>
        <link refid="helper_8hpp_source"/>
        <childnode refid="5803" relation="include">
        </childnode>
        <childnode refid="5804" relation="include">
        </childnode>
        <childnode refid="5741" relation="include">
        </childnode>
        <childnode refid="5805" relation="include">
        </childnode>
        <childnode refid="5749" relation="include">
        </childnode>
        <childnode refid="5806" relation="include">
        </childnode>
        <childnode refid="5807" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
      </node>
      <node id="5785">
        <label>traffic_simulator/vehicle_model/sim_model_interface.hpp</label>
        <link refid="sim__model__interface_8hpp"/>
        <childnode refid="5783" relation="include">
        </childnode>
        <childnode refid="5698" relation="include">
        </childnode>
      </node>
      <node id="5721">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="5773">
        <label>traffic_simulator/traffic_lights/traffic_light_phase.hpp</label>
        <link refid="traffic__light__phase_8hpp_source"/>
        <childnode refid="5681" relation="include">
        </childnode>
        <childnode refid="5684" relation="include">
        </childnode>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5792">
        <label>traffic_simulator/entity/pedestrian_entity.hpp</label>
        <link refid="pedestrian__entity_8hpp_source"/>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5793" relation="include">
        </childnode>
        <childnode refid="5781" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5794" relation="include">
        </childnode>
        <childnode refid="5712" relation="include">
        </childnode>
        <childnode refid="5751" relation="include">
        </childnode>
        <childnode refid="5763" relation="include">
        </childnode>
        <childnode refid="5797" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5807">
        <label>openscenario_msgs/msg/lanelet_pose.hpp</label>
      </node>
      <node id="5716">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="5766">
        <label>autoware_perception_msgs/msg/traffic_light_state_array.hpp</label>
      </node>
      <node id="5761">
        <label>traffic_simulator/behavior/action_node.hpp</label>
        <link refid="action__node_8hpp_source"/>
        <childnode refid="5760" relation="include">
        </childnode>
        <childnode refid="5762" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5756" relation="include">
        </childnode>
        <childnode refid="5711" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5763" relation="include">
        </childnode>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5774" relation="include">
        </childnode>
        <childnode refid="5736" relation="include">
        </childnode>
        <childnode refid="5765" relation="include">
        </childnode>
        <childnode refid="5746" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5691">
        <label>tf2_ros/static_transform_broadcaster.h</label>
      </node>
      <node id="5806">
        <label>openscenario_msgs/msg/action_status.hpp</label>
      </node>
      <node id="5751">
        <label>traffic_simulator/behavior/target_speed_planner.hpp</label>
        <link refid="target__speed__planner_8hpp_source"/>
        <childnode refid="5693" relation="include">
        </childnode>
      </node>
      <node id="5732">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="5781">
        <label>pugixml.hpp</label>
      </node>
      <node id="5748">
        <label>autoware_perception_msgs/msg/lamp_state.hpp</label>
      </node>
      <node id="5778">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="5741">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="5777">
        <label>openscenario_msgs.pb.h</label>
      </node>
      <node id="5708">
        <label>concealer/autoware_auto.hpp</label>
      </node>
      <node id="5697">
        <label>openscenario_msgs/msg/vehicle_parameters.hpp</label>
      </node>
      <node id="5804">
        <label>cmath</label>
      </node>
      <node id="5770">
        <label>cassert</label>
      </node>
      <node id="5686">
        <label>stdexcept</label>
      </node>
      <node id="5784">
        <label>eigen3/Eigen/LU</label>
      </node>
      <node id="5696">
        <label>openscenario_msgs/msg/entity_status_with_trajectory_array.hpp</label>
      </node>
      <node id="5753">
        <label>behaviortree_cpp_v3/bt_factory.h</label>
      </node>
      <node id="5687">
        <label>string</label>
      </node>
      <node id="5756">
        <label>openscenario_msgs/msg/obstacle.hpp</label>
      </node>
      <node id="5730">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="5733">
        <label>traffic_simulator/hdmap_utils/cache.hpp</label>
        <link refid="cache_8hpp_source"/>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5734" relation="include">
        </childnode>
        <childnode refid="5735" relation="include">
        </childnode>
        <childnode refid="5684" relation="include">
        </childnode>
        <childnode refid="5736" relation="include">
        </childnode>
        <childnode refid="5746" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5731">
        <label>map</label>
      </node>
      <node id="5738">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="5739" relation="include">
        </childnode>
        <childnode refid="5740" relation="include">
        </childnode>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5734" relation="include">
        </childnode>
        <childnode refid="5741" relation="include">
        </childnode>
        <childnode refid="5742" relation="include">
        </childnode>
        <childnode refid="5743" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5769">
        <label>traffic_simulator/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="5770" relation="include">
        </childnode>
        <childnode refid="5771" relation="include">
        </childnode>
        <childnode refid="5731" relation="include">
        </childnode>
        <childnode refid="5772" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
      </node>
      <node id="5694">
        <label>openscenario_msgs/msg/bounding_box.hpp</label>
      </node>
      <node id="5776">
        <label>traffic_simulator/entity/vehicle_parameter.hpp</label>
        <link refid="vehicle__parameter_8hpp_source"/>
        <childnode refid="5777" relation="include">
        </childnode>
        <childnode refid="5778" relation="include">
        </childnode>
        <childnode refid="5779" relation="include">
        </childnode>
        <childnode refid="5780" relation="include">
        </childnode>
        <childnode refid="5742" relation="include">
        </childnode>
        <childnode refid="5694" relation="include">
        </childnode>
        <childnode refid="5697" relation="include">
        </childnode>
        <childnode refid="5781" relation="include">
        </childnode>
        <childnode refid="5698" relation="include">
        </childnode>
        <childnode refid="5685" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
      </node>
      <node id="5698">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="5720">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="5757">
        <label>traffic_simulator/behavior/vehicle/lane_change_action.hpp</label>
        <link refid="lane__change__action_8hpp_source"/>
        <childnode refid="5758" relation="include">
        </childnode>
        <childnode refid="5753" relation="include">
        </childnode>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5732" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5759" relation="include">
        </childnode>
        <childnode refid="5776" relation="include">
        </childnode>
        <childnode refid="5738" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5707">
        <label>concealer/autoware_architecture_proposal.hpp</label>
      </node>
      <node id="5690">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="5713">
        <label>traffic_simulator/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="5714" relation="include">
        </childnode>
        <childnode refid="5715" relation="include">
        </childnode>
        <childnode refid="5716" relation="include">
        </childnode>
        <childnode refid="5717" relation="include">
        </childnode>
        <childnode refid="5718" relation="include">
        </childnode>
        <childnode refid="5719" relation="include">
        </childnode>
        <childnode refid="5720" relation="include">
        </childnode>
        <childnode refid="5721" relation="include">
        </childnode>
        <childnode refid="5722" relation="include">
        </childnode>
        <childnode refid="5723" relation="include">
        </childnode>
        <childnode refid="5724" relation="include">
        </childnode>
        <childnode refid="5690" relation="include">
        </childnode>
        <childnode refid="5725" relation="include">
        </childnode>
        <childnode refid="5702" relation="include">
        </childnode>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5726" relation="include">
        </childnode>
        <childnode refid="5727" relation="include">
        </childnode>
        <childnode refid="5728" relation="include">
        </childnode>
        <childnode refid="5729" relation="include">
        </childnode>
        <childnode refid="5730" relation="include">
        </childnode>
        <childnode refid="5731" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5732" relation="include">
        </childnode>
        <childnode refid="5698" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5733" relation="include">
        </childnode>
        <childnode refid="5738" relation="include">
        </childnode>
        <childnode refid="5747" relation="include">
        </childnode>
        <childnode refid="5746" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
        <childnode refid="5750" relation="include">
        </childnode>
      </node>
      <node id="5737">
        <label>exception</label>
      </node>
      <node id="5814">
        <label>boost/geometry/geometries/point_xy.hpp</label>
      </node>
      <node id="5815">
        <label>traffic_simulator/math/collision.hpp</label>
        <link refid="collision_8hpp_source"/>
        <childnode refid="5741" relation="include">
        </childnode>
        <childnode refid="5694" relation="include">
        </childnode>
        <childnode refid="5808" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5800">
        <label>traffic_simulator/traffic/traffic_module_base.hpp</label>
        <link refid="traffic__module__base_8hpp_source"/>
      </node>
      <node id="5774">
        <label>traffic_simulator/helper/stop_watch.hpp</label>
        <link refid="stop__watch_8hpp_source"/>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5775" relation="include">
        </childnode>
        <childnode refid="5749" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
      </node>
      <node id="5809">
        <label>boost/assert.hpp</label>
      </node>
      <node id="5797">
        <label>traffic_simulator/entity/pedestrian_parameter.hpp</label>
        <link refid="pedestrian__parameter_8hpp_source"/>
        <childnode refid="5778" relation="include">
        </childnode>
        <childnode refid="5779" relation="include">
        </childnode>
        <childnode refid="5780" relation="include">
        </childnode>
        <childnode refid="5742" relation="include">
        </childnode>
        <childnode refid="5793" relation="include">
        </childnode>
        <childnode refid="5781" relation="include">
        </childnode>
        <childnode refid="5698" relation="include">
        </childnode>
        <childnode refid="5685" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5776" relation="include">
        </childnode>
      </node>
      <node id="5714">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="5742">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="5695">
        <label>openscenario_msgs/msg/driver_model.hpp</label>
      </node>
      <node id="5816">
        <label>traffic_simulator/math/transfrom.hpp</label>
        <link refid="transfrom_8hpp_source"/>
        <childnode refid="5741" relation="include">
        </childnode>
      </node>
      <node id="5768">
        <label>autoware_perception_msgs/msg/traffic_light_state.hpp</label>
      </node>
      <node id="5719">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="5729">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="5810">
        <label>boost/assign/list_of.hpp</label>
      </node>
      <node id="5688">
        <label>traffic_simulator/entity/entity_manager.hpp</label>
        <link refid="entity__manager_8hpp_source"/>
        <childnode refid="5689" relation="include">
        </childnode>
        <childnode refid="5690" relation="include">
        </childnode>
        <childnode refid="5691" relation="include">
        </childnode>
        <childnode refid="5692" relation="include">
        </childnode>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5694" relation="include">
        </childnode>
        <childnode refid="5695" relation="include">
        </childnode>
        <childnode refid="5696" relation="include">
        </childnode>
        <childnode refid="5697" relation="include">
        </childnode>
        <childnode refid="5698" relation="include">
        </childnode>
        <childnode refid="5684" relation="include">
        </childnode>
        <childnode refid="5686" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5699" relation="include">
        </childnode>
        <childnode refid="5706" relation="include">
        </childnode>
        <childnode refid="5763" relation="include">
        </childnode>
        <childnode refid="5790" relation="include">
        </childnode>
        <childnode refid="5792" relation="include">
        </childnode>
        <childnode refid="5710" relation="include">
        </childnode>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5799" relation="include">
        </childnode>
        <childnode refid="5765" relation="include">
        </childnode>
        <childnode refid="5801" relation="include">
        </childnode>
        <childnode refid="5746" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
        <childnode refid="5750" relation="include">
        </childnode>
      </node>
      <node id="5740">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="5760">
        <label>behaviortree_cpp_v3/action_node.h</label>
      </node>
      <node id="5728">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="5734">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="5701">
        <label>ament_index_cpp/get_package_share_directory.hpp</label>
      </node>
      <node id="5771">
        <label>cstdio</label>
      </node>
      <node id="5762">
        <label>boost/algorithm/clamp.hpp</label>
      </node>
      <node id="5790">
        <label>traffic_simulator/entity/misc_object_entity.hpp</label>
        <link refid="misc__object__entity_8hpp_source"/>
        <childnode refid="5791" relation="include">
        </childnode>
        <childnode refid="5763" relation="include">
        </childnode>
      </node>
      <node id="5744">
        <label>vector</label>
      </node>
      <node id="5702">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="5739">
        <label>gtest/gtest.h</label>
      </node>
      <node id="5710">
        <label>traffic_simulator/entity/vehicle_entity.hpp</label>
        <link refid="vehicle__entity_8hpp_source"/>
        <childnode refid="5695" relation="include">
        </childnode>
        <childnode refid="5697" relation="include">
        </childnode>
        <childnode refid="5711" relation="include">
        </childnode>
        <childnode refid="5698" relation="include">
        </childnode>
        <childnode refid="5712" relation="include">
        </childnode>
        <childnode refid="5751" relation="include">
        </childnode>
        <childnode refid="5752" relation="include">
        </childnode>
        <childnode refid="5757" relation="include">
        </childnode>
        <childnode refid="5763" relation="include">
        </childnode>
        <childnode refid="5776" relation="include">
        </childnode>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5781" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5764">
        <label>autoware_vehicle_msgs/msg/vehicle_command.hpp</label>
      </node>
      <node id="5745">
        <label>utility</label>
      </node>
      <node id="5795">
        <label>traffic_simulator/behavior/pedestrian/follow_lane_action.hpp</label>
        <link refid="pedestrian_2follow__lane__action_8hpp_source"/>
        <childnode refid="5758" relation="include">
        </childnode>
        <childnode refid="5753" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5732" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5796" relation="include">
        </childnode>
        <childnode refid="5797" relation="include">
        </childnode>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5752">
        <label>traffic_simulator/behavior/vehicle/behavior_tree.hpp</label>
        <link refid="vehicle_2behavior__tree_8hpp_source"/>
        <childnode refid="5753" relation="include">
        </childnode>
        <childnode refid="5754" relation="include">
        </childnode>
        <childnode refid="5755" relation="include">
        </childnode>
        <childnode refid="5734" relation="include">
        </childnode>
        <childnode refid="5731" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5732" relation="include">
        </childnode>
        <childnode refid="5756" relation="include">
        </childnode>
        <childnode refid="5711" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5685">
        <label>sstream</label>
      </node>
      <node id="5743">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5704">
        <label>boost/range/iterator_range.hpp</label>
      </node>
      <node id="5789">
        <label>math.h</label>
      </node>
      <node id="5723">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="5706">
        <label>traffic_simulator/entity/ego_entity.hpp</label>
        <link refid="ego__entity_8hpp_source"/>
        <childnode refid="5700" relation="include">
        </childnode>
        <childnode refid="5702" relation="include">
        </childnode>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5707" relation="include">
        </childnode>
        <childnode refid="5708" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5709" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5699" relation="include">
        </childnode>
        <childnode refid="5710" relation="include">
        </childnode>
        <childnode refid="5782" relation="include">
        </childnode>
        <childnode refid="5786" relation="include">
        </childnode>
        <childnode refid="5746" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5736">
        <label>traffic_simulator/math/catmull_rom_spline.hpp</label>
        <link refid="catmull__rom__spline_8hpp_source"/>
        <childnode refid="5737" relation="include">
        </childnode>
        <childnode refid="5734" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5738" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5718">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="5779">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="5749">
        <label>iostream</label>
      </node>
      <node id="5796">
        <label>traffic_simulator/behavior/pedestrian/pedestrian_action_node.hpp</label>
        <link refid="pedestrian__action__node_8hpp_source"/>
        <childnode refid="5760" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5793" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5761" relation="include">
        </childnode>
        <childnode refid="5797" relation="include">
        </childnode>
      </node>
      <node id="5759">
        <label>traffic_simulator/behavior/vehicle/vehicle_action_node.hpp</label>
        <link refid="vehicle__action__node_8hpp_source"/>
        <childnode refid="5760" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5695" relation="include">
        </childnode>
        <childnode refid="5756" relation="include">
        </childnode>
        <childnode refid="5697" relation="include">
        </childnode>
        <childnode refid="5711" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5761" relation="include">
        </childnode>
        <childnode refid="5776" relation="include">
        </childnode>
        <childnode refid="5774" relation="include">
        </childnode>
        <childnode refid="5736" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5715">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="5787">
        <label>deque</label>
      </node>
      <node id="5767">
        <label>traffic_simulator/traffic_lights/traffic_light.hpp</label>
        <link refid="traffic__light_8hpp_source"/>
        <childnode refid="5768" relation="include">
        </childnode>
        <childnode refid="5749" relation="include">
        </childnode>
        <childnode refid="5681" relation="include">
        </childnode>
        <childnode refid="5686" relation="include">
        </childnode>
        <childnode refid="5769" relation="include">
        </childnode>
        <childnode refid="5773" relation="include">
        </childnode>
        <childnode refid="5747" relation="include">
        </childnode>
        <childnode refid="5746" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5765">
        <label>traffic_simulator/traffic_lights/traffic_light_manager.hpp</label>
        <link refid="traffic__light__manager_8hpp_source"/>
        <childnode refid="5766" relation="include">
        </childnode>
        <childnode refid="5705" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5698" relation="include">
        </childnode>
        <childnode refid="5686" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5767" relation="include">
        </childnode>
        <childnode refid="5746" relation="include">
        </childnode>
        <childnode refid="5745" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
        <childnode refid="5750" relation="include">
        </childnode>
      </node>
      <node id="5746">
        <label>unordered_map</label>
      </node>
      <node id="5725">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="5689">
        <label>tf2/LinearMath/Quaternion.h</label>
      </node>
      <node id="5758">
        <label>behaviortree_cpp_v3/behavior_tree.h</label>
      </node>
      <node id="5750">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="5763">
        <label>traffic_simulator/entity/entity_base.hpp</label>
        <link refid="entity__base_8hpp_source"/>
        <childnode refid="5764" relation="include">
        </childnode>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5694" relation="include">
        </childnode>
        <childnode refid="5695" relation="include">
        </childnode>
        <childnode refid="5732" relation="include">
        </childnode>
        <childnode refid="5709" relation="include">
        </childnode>
        <childnode refid="5756" relation="include">
        </childnode>
        <childnode refid="5697" relation="include">
        </childnode>
        <childnode refid="5711" relation="include">
        </childnode>
        <childnode refid="5683" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5765" relation="include">
        </childnode>
        <childnode refid="5746" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
        <childnode refid="5750" relation="include">
        </childnode>
      </node>
      <node id="5735">
        <label>mutex</label>
      </node>
      <node id="5717">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="5722">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="5775">
        <label>chrono</label>
      </node>
      <node id="5783">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="5812">
        <label>boost/geometry/algorithms/disjoint.hpp</label>
      </node>
      <node id="5693">
        <label>boost/optional.hpp</label>
      </node>
      <node id="5692">
        <label>tf2_ros/transform_broadcaster.h</label>
      </node>
      <node id="5805">
        <label>geometry_msgs/msg/quaternion.hpp</label>
      </node>
      <node id="5724">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="5813">
        <label>boost/geometry/geometries/linestring.hpp</label>
      </node>
      <node id="5811">
        <label>boost/geometry.hpp</label>
      </node>
      <node id="5782">
        <label>traffic_simulator/vehicle_model/sim_model_ideal.hpp</label>
        <link refid="sim__model__ideal_8hpp"/>
        <childnode refid="5783" relation="include">
        </childnode>
        <childnode refid="5784" relation="include">
        </childnode>
        <childnode refid="5749" relation="include">
        </childnode>
        <childnode refid="5785" relation="include">
        </childnode>
      </node>
      <node id="5801">
        <label>type_traits</label>
      </node>
      <node id="5700">
        <label>algorithm</label>
      </node>
      <node id="5793">
        <label>openscenario_msgs/msg/pedestrian_parameters.hpp</label>
      </node>
      <node id="5679">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/entity/entity_manager.cpp</label>
        <link refid="entity__manager_8cpp"/>
        <childnode refid="5680" relation="include">
        </childnode>
        <childnode refid="5681" relation="include">
        </childnode>
        <childnode refid="5682" relation="include">
        </childnode>
        <childnode refid="5683" relation="include">
        </childnode>
        <childnode refid="5684" relation="include">
        </childnode>
        <childnode refid="5685" relation="include">
        </childnode>
        <childnode refid="5686" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
        <childnode refid="5688" relation="include">
        </childnode>
        <childnode refid="5802" relation="include">
        </childnode>
        <childnode refid="5808" relation="include">
        </childnode>
        <childnode refid="5815" relation="include">
        </childnode>
        <childnode refid="5816" relation="include">
        </childnode>
        <childnode refid="5746" relation="include">
        </childnode>
        <childnode refid="5744" relation="include">
        </childnode>
      </node>
      <node id="5803">
        <label>simulation_api_schema.pb.h</label>
      </node>
      <node id="5682">
        <label>memory</label>
      </node>
      <node id="5699">
        <label>traffic_simulator/api/configuration.hpp</label>
        <link refid="configuration_8hpp_source"/>
        <childnode refid="5700" relation="include">
        </childnode>
        <childnode refid="5701" relation="include">
        </childnode>
        <childnode refid="5702" relation="include">
        </childnode>
        <childnode refid="5703" relation="include">
        </childnode>
        <childnode refid="5704" relation="include">
        </childnode>
        <childnode refid="5705" relation="include">
        </childnode>
        <childnode refid="5684" relation="include">
        </childnode>
        <childnode refid="5687" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetraffic__simulator">traffic_simulator</innernamespace>
    <innernamespace refid="namespacetraffic__simulator_1_1entity">traffic_simulator::entity</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;scenario_simulator_exception/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/entity/entity_manager.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/helper/helper.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/bounding_box.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/collision.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/transfrom.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetraffic__simulator" kindref="compound">traffic_simulator</ref></highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">entity</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::broadcastBaseLinkTransform()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(const<sp/>auto<sp/>&amp;<sp/>name<sp/>:<sp/>getEntityNames())<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(getEntityType(name).type<sp/>==<sp/>openscenario_msgs::msg::EntityType::EGO)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>auto<sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>(status)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::PoseStamped<sp/>pose;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.pose<sp/>=<sp/>status-&gt;pose;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.header.stamp<sp/>=<sp/>clock_ptr_-&gt;now();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.header.frame_id<sp/>=<sp/>&quot;base_link&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>broadcastTransform(pose,<sp/>false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::broadcastEntityTransform()</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>names<sp/>=<sp/>getEntityNames();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>names.begin();<sp/>it<sp/>!=<sp/>names.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entityStatusSet(*it))<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(*it);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::PoseStamped<sp/>pose;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.pose<sp/>=<sp/>status-&gt;pose;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.header.stamp<sp/>=<sp/>clock_ptr_-&gt;now();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pose.header.frame_id<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>broadcastTransform(pose);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>broadcastBaseLinkTransform();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::broadcastTransform(</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::PoseStamped<sp/>&amp;<sp/>pose,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>static_transform)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::TransformStamped<sp/>transform_stamped;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.header.stamp<sp/>=<sp/>pose.header.stamp;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.child_frame_id<sp/>=<sp/>pose.header.frame_id;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.transform.translation.x<sp/>=<sp/>pose.pose.position.x;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.transform.translation.y<sp/>=<sp/>pose.pose.position.y;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.transform.translation.z<sp/>=<sp/>pose.pose.position.z;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>transform_stamped.transform.rotation<sp/>=<sp/>pose.pose.orientation;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_transform)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>broadcaster_.sendTransform(transform_stamped);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>base_link_broadcaster_.sendTransform(transform_stamped);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::checkCollision(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name1)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name0<sp/>==<sp/>name1<sp/>or<sp/>not<sp/>entityStatusSet(name0)<sp/>or<sp/>not<sp/>entityStatusSet(name1))<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status0<sp/>=<sp/>getEntityStatus(name0);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status0)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>name0,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status<sp/>does<sp/>not<sp/>exist.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status1<sp/>=<sp/>getEntityStatus(name1);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status1)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>calculate<sp/>map<sp/>pose<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name1);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bbox0<sp/>=<sp/>getBoundingBox(name0);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bbox1<sp/>=<sp/>getBoundingBox(name1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traffic_simulator::math::checkCollision2D(status0-&gt;pose,<sp/>bbox0,<sp/>status1-&gt;pose,<sp/>bbox1);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::despawnEntity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entityExists(name)<sp/>&amp;&amp;<sp/>entities_.erase(name);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::entityExists(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entities_.find(name)<sp/>!=<sp/>std::end(entities_);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::entityStatusSet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="120"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entities_.at(name)-&gt;statusSet();</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getBoundingBoxDistance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>to)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>-&gt;<sp/>boost::optional&lt;double&gt;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bbox0<sp/>=<sp/>getBoundingBox(from);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pose0<sp/>=<sp/><ref refid="classtraffic__simulator_1_1entity_1_1EntityManager_1a25549719aa5db464b3812f4ac824697a" kindref="member">getMapPose</ref>(from);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bbox1<sp/>=<sp/>getBoundingBox(to);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pose1<sp/>=<sp/><ref refid="classtraffic__simulator_1_1entity_1_1EntityManager_1a25549719aa5db464b3812f4ac824697a" kindref="member">getMapPose</ref>(to);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>math::getPolygonDistance(pose0,<sp/>bbox0,<sp/>pose1,<sp/>bbox1);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getCurrentTime()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_time_;<sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getDistanceToCrosswalk(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>target_crosswalk_id)<sp/>-&gt;<sp/>boost::optional&lt;double&gt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getWaypoints(name).waypoints.empty())<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref><sp/>spline(getWaypoints(name).waypoints);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>polygon<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLaneletPolygon(target_crosswalk_id);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spline.getCollisionPointIn2D(polygon);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getDistanceToStopLine(</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>target_stop_line_id)<sp/>-&gt;<sp/>boost::optional&lt;double&gt;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getWaypoints(name).waypoints.empty())<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref><sp/>spline(getWaypoints(name).waypoints);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>polygon<sp/>=<sp/>hdmap_utils_ptr_-&gt;getStopLinePolygon(target_stop_line_id);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spline.getCollisionPointIn2D(polygon);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getEntityNames()<sp/>const<sp/>-&gt;<sp/>const<sp/>std::vector&lt;std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>names{};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>each<sp/>:<sp/>entities_)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>names.push_back(each.first);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>names;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getEntityStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::optional&lt;openscenario_msgs::msg::EntityStatus&gt;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatus<sp/>status_msg;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.find(name);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>entities_.end())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>exist.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>status_msg<sp/>=<sp/>it-&gt;second-&gt;getStatus();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>status_msg.bounding_box<sp/>=<sp/>getBoundingBox(name);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>status_msg.action_status.current_action<sp/>=<sp/>getCurrentAction(name);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(getEntityType(name).type)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::EGO:</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.EGO;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::VEHICLE:</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.VEHICLE;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::PEDESTRIAN:</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.PEDESTRIAN;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>status_msg.time<sp/>=<sp/>current_time_;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>status_msg.name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status_msg;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getEntityTypeList()<sp/>const</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>-&gt;<sp/>const<sp/>std::unordered_map&lt;std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>openscenario_msgs::msg::EntityType&gt;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>openscenario_msgs::msg::EntityType&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.begin();<sp/>it<sp/>!=<sp/>entities_.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.emplace(it-&gt;first,<sp/>it-&gt;second-&gt;getEntityType());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getHdmapUtils()<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;hdmap_utils::HdMapUtils&gt;<sp/>&amp;</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdmap_utils_ptr_;</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getLaneletPose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>-&gt;<sp/>boost::optional&lt;openscenario_msgs::msg::LaneletPose&gt;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status-&gt;lanelet_pose_valid)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status-&gt;lanelet_pose;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_crosswalk<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getEntityType(name).type<sp/>==<sp/>openscenario_msgs::msg::EntityType::VEHICLE)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>include_crosswalk<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toLaneletPose(status-&gt;pose,<sp/>include_crosswalk);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getLongitudinalDistance(</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_distance)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>-&gt;<sp/>boost::optional&lt;double&gt;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entityStatusSet(from)<sp/>||<sp/>!entityStatusSet(to))<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>from_status<sp/>=<sp/>getEntityStatus(from);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_status<sp/>=<sp/>getEntityStatus(to);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from_status<sp/>&amp;&amp;<sp/>to_status)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLongitudinalDistance(</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_status-&gt;lanelet_pose.lanelet_id,<sp/>from_status-&gt;lanelet_pose.s,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_status-&gt;lanelet_pose.lanelet_id,<sp/>to_status-&gt;lanelet_pose.s);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(distance<sp/>&amp;&amp;<sp/>distance<sp/>&lt;=<sp/>max_distance)<sp/>?<sp/>distance<sp/>:<sp/>boost::none;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">geometry_msgs::msg::Pose<sp/><ref refid="classtraffic__simulator_1_1entity_1_1EntityManager_1a25549719aa5db464b3812f4ac824697a" kindref="member">EntityManager::getMapPose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>entity_name)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(entity_name);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>entity_name,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status-&gt;pose;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">geometry_msgs::msg::Pose<sp/><ref refid="classtraffic__simulator_1_1entity_1_1EntityManager_1a25549719aa5db464b3812f4ac824697a" kindref="member">EntityManager::getMapPose</ref>(</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>reference_entity_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>relative_pose)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ref_status<sp/>=<sp/>getEntityStatus(reference_entity_name);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ref_status)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>reference_entity_name,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>tf2::Transform<sp/>ref_transform,<sp/>relative_transform;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>tf2::fromMsg(ref_status-&gt;pose,<sp/>ref_transform);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>tf2::fromMsg(relative_pose,<sp/>relative_transform);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>ret;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>tf2::toMsg(ref_transform<sp/>*<sp/>relative_transform,<sp/>ret);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getNumberOfEgo()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::count_if(std::begin(entities_),<sp/>std::end(entities_),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>each)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isEgo(each.first);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>EntityManager::getEgoName()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="294"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>names<sp/>=<sp/>getEntityNames();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name<sp/>:<sp/>names)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEgo(name))<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;const<sp/>std::string<sp/>EntityManager::getEgoName(const<sp/>std::string<sp/>&amp;<sp/>name)<sp/>function<sp/>was<sp/>called,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;but<sp/>ego<sp/>vehicle<sp/>does<sp/>not<sp/>exist&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getObstacle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>-&gt;<sp/>boost::optional&lt;openscenario_msgs::msg::Obstacle&gt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_time_<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entities_.at(name)-&gt;getObstacle();</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getRelativePose(</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>to)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>-&gt;<sp/>geometry_msgs::msg::Pose</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traffic_simulator::math::getRelativePose(from,<sp/>to);</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getRelativePose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>to)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>-&gt;<sp/>geometry_msgs::msg::Pose</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_status<sp/>=<sp/>getEntityStatus(to);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!to_status)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>to<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRelativePose(from,<sp/>to_status-&gt;pose);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getRelativePose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>to)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>-&gt;<sp/>geometry_msgs::msg::Pose</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>from_status<sp/>=<sp/>getEntityStatus(from);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!from_status)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>from<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRelativePose(from_status-&gt;pose,<sp/>to);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getRelativePose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>from,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>to)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>-&gt;<sp/>geometry_msgs::msg::Pose</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>from_status<sp/>=<sp/>getEntityStatus(from);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_status<sp/>=<sp/>getEntityStatus(to);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!from_status)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>from<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!to_status)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>to<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRelativePose(from_status-&gt;pose,<sp/>to_status-&gt;pose);</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getStepTime()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>step_time_;<sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::getWaypoints(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)<sp/>-&gt;<sp/>openscenario_msgs::msg::WaypointsArray</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_time_<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::WaypointsArray();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entities_.at(name)-&gt;getWaypoints();</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::isEgo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="367"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getEntityType(name).type<sp/>==<sp/>openscenario_msgs::msg::EntityType::EGO;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::isInLanelet(</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>lanelet_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entityStatusSet(name))<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLaneletLength(lanelet_id);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status-&gt;lanelet_pose_valid)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status-&gt;lanelet_pose.lanelet_id<sp/>==<sp/>lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dist0<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLongitudinalDistance(</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet_id,<sp/>l,<sp/>status-&gt;lanelet_pose.lanelet_id,<sp/>status-&gt;lanelet_pose.s);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dist1<sp/>=<sp/>hdmap_utils_ptr_-&gt;getLongitudinalDistance(</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status-&gt;lanelet_pose.lanelet_id,<sp/>status-&gt;lanelet_pose.s,<sp/>lanelet_id,<sp/>0);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist0)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist0.get()<sp/>&lt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist1)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dist1.get()<sp/>&lt;<sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::isStopping(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="407"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fabs(status-&gt;action_status.twist.linear.x)<sp/>&lt;<sp/>std::numeric_limits&lt;double&gt;::epsilon();</highlight></codeline>
<codeline lineno="413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::reachPosition(</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>target_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="417"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(target_name);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status<sp/>&amp;&amp;<sp/>reachPosition(name,<sp/>status-&gt;pose,<sp/>tolerance);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::reachPosition(</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose<sp/>&amp;<sp/>target_pose,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="425"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;entity<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>status<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pose<sp/>=<sp/>status-&gt;pose;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>std::sqrt(</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pow(pose.position.x<sp/>-<sp/>target_pose.position.x,<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pow(pose.position.y<sp/>-<sp/>target_pose.position.y,<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pow(pose.position.z<sp/>-<sp/>target_pose.position.z,<sp/>2));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distance<sp/>&lt;<sp/>tolerance;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::reachPosition(</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>lanelet_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="444"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>lanelet_pose;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet_pose.lanelet_id<sp/>=<sp/>lanelet_id;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet_pose.s<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet_pose.offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_pose<sp/>=<sp/>hdmap_utils_ptr_-&gt;toMapPose(lanelet_pose);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reachPosition(name,<sp/>target_pose.pose,<sp/>tolerance);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::requestLaneChange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Direction<sp/>&amp;<sp/>direction)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>getEntityStatus(name);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction<sp/>==<sp/>Direction::LEFT)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdmap_utils_ptr_-&gt;getLaneChangeableLaneletId(status-&gt;lanelet_pose.lanelet_id,<sp/></highlight><highlight class="stringliteral">&quot;left&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requestLaneChange(name,<sp/>target.get());</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction<sp/>==<sp/>Direction::RIGHT)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdmap_utils_ptr_-&gt;getLaneChangeableLaneletId(status-&gt;lanelet_pose.lanelet_id,<sp/></highlight><highlight class="stringliteral">&quot;right&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requestLaneChange(name,<sp/>target.get());</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::setTargetSpeed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_speed,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>continuous)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEgo(name)<sp/>&amp;&amp;<sp/>getCurrentTime()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;You<sp/>cannot<sp/>set<sp/>target<sp/>speed<sp/>to<sp/>the<sp/>ego<sp/>vehicle<sp/>after<sp/>starting<sp/>scenario.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entities_.at(name)-&gt;setTargetSpeed(target_speed,<sp/>continuous);</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EntityManager::setEntityStatus(</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,<sp/>openscenario_msgs::msg::EntityStatus<sp/>status)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>status.name<sp/>=<sp/>name;<sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>UGLY<sp/>CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isEgo(name)<sp/>&amp;&amp;<sp/>getCurrentTime()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;You<sp/>cannot<sp/>set<sp/>entity<sp/>status<sp/>to<sp/>the<sp/>ego<sp/>vehicle<sp/>name:&quot;</highlight><highlight class="normal">,<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>after<sp/>starting<sp/>scenario.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entities_.at(name)-&gt;setStatus(status);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::setVerbose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>verbose)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>configuration.verbose<sp/>=<sp/>verbose;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>entity<sp/>:<sp/>entities_)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>entity.second-&gt;setVerbose(verbose);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>EntityManager::toMapPose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::LaneletPose<sp/>&amp;<sp/>lanelet_pose)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geometry_msgs::msg::Pose</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hdmap_utils_ptr_-&gt;toMapPose(lanelet_pose).pose;</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">openscenario_msgs::msg::EntityStatus<sp/>EntityManager::updateNpcLogic(</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>name,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>openscenario_msgs::msg::EntityType&gt;<sp/>&amp;<sp/>type_list)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.verbose)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;update<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>behavior&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>entities_[name]-&gt;setEntityTypeList(type_list);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>entities_[name]-&gt;onUpdate(current_time_,<sp/>step_time_);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entities_[name]-&gt;statusSet())<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entities_[name]-&gt;getStatus();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;status<sp/>of<sp/>entity<sp/>&quot;</highlight><highlight class="normal">,<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::update(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time)</highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>std::chrono::system_clock::time_point<sp/>start,<sp/>end;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>start<sp/>=<sp/>std::chrono::system_clock::now();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>step_time_<sp/>=<sp/>step_time;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>current_time_<sp/>=<sp/>current_time;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.verbose)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;--------------------------<sp/>UPDATE<sp/>--------------------------&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;current_time<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>current_time_<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getNumberOfEgo()<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;multi<sp/>ego<sp/>simulation<sp/>does<sp/>not<sp/>support<sp/>yet&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_time_<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>traffic_light_manager_ptr_-&gt;update(step_time_);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>setVerbose(configuration.verbose);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type_list<sp/>=<sp/>getEntityTypeList();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::string,<sp/>openscenario_msgs::msg::EntityStatus&gt;<sp/>all_status;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>entity_names<sp/>=<sp/>getEntityNames();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>entity_name<sp/>:<sp/>entity_names)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entities_[entity_name]-&gt;statusSet())<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>updateNpcLogic(entity_name,<sp/>type_list);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status.bounding_box<sp/>=<sp/>getBoundingBox(entity_name);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>all_status.emplace(entity_name,<sp/>status);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>entities_.begin();<sp/>it<sp/>!=<sp/>entities_.end();<sp/>it++)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;second-&gt;setOtherStatus(all_status);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>entity_type_list<sp/>=<sp/>getEntityTypeList();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::EntityStatusWithTrajectoryArray<sp/>status_array_msg;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>status<sp/>:<sp/>all_status)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>openscenario_msgs::msg::EntityStatusWithTrajectory<sp/>status_with_traj;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status_msg<sp/>=<sp/>status.second;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg.name<sp/>=<sp/>status.first;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg.bounding_box<sp/>=<sp/>getBoundingBox(status.first);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>status_msg.action_status.current_action<sp/>=<sp/>getCurrentAction(status.first);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(getEntityType(status.first).type)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::EGO:</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.EGO;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::VEHICLE:</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.VEHICLE;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::EntityType::PEDESTRIAN:</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_msg.type.type<sp/>=<sp/>status_msg.type.PEDESTRIAN;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>status_with_traj.waypoint<sp/>=<sp/>getWaypoints(status.first);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>obstacle<sp/>=<sp/>getObstacle(status.first);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obstacle)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_with_traj.obstacle<sp/>=<sp/>obstacle.get();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_with_traj.obstacle_find<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status_with_traj.obstacle_find<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>status_with_traj.status<sp/>=<sp/>status_msg;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>status_with_traj.name<sp/>=<sp/>status.first;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>status_with_traj.time<sp/>=<sp/>current_time<sp/>+<sp/>step_time;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>status_array_msg.data.emplace_back(status_with_traj);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>entity_status_array_pub_ptr_-&gt;publish(status_array_msg);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>end<sp/>=<sp/>std::chrono::system_clock::now();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elapsed<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end<sp/>-<sp/>start).count();</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configuration.verbose)<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;elapsed<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>elapsed<sp/>/<sp/>1000<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>seconds<sp/>in<sp/>update<sp/>function.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EntityManager::updateHdmapMarker()</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>MarkerArray<sp/>markers;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stamp<sp/>=<sp/>clock_ptr_-&gt;now();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>marker_raw<sp/>:<sp/>markers_raw_.markers)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>visualization_msgs::msg::Marker<sp/>marker<sp/>=<sp/>marker_raw;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>marker.header.stamp<sp/>=<sp/>stamp;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>markers.markers.emplace_back(marker);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>lanelet_marker_pub_ptr_-&gt;publish(markers);</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>traffic_simulator</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/entity/entity_manager.cpp"/>
  </compounddef>
</doxygen>
