<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="hdmap__utils_8cpp" kind="file" language="C++">
    <compoundname>hdmap_utils.cpp</compoundname>
    <includes local="no">lanelet2_core/utility/Units.h</includes>
    <includes local="no">lanelet2_io/Io.h</includes>
    <includes local="no">lanelet2_io/io_handlers/Serialize.h</includes>
    <includes local="no">lanelet2_projection/UTM.h</includes>
    <includes local="no">quaternion_operation/quaternion_operation.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">boost/archive/binary_iarchive.hpp</includes>
    <includes local="no">boost/archive/binary_oarchive.hpp</includes>
    <includes local="no">boost/assign/list_of.hpp</includes>
    <includes local="no">boost/geometry.hpp</includes>
    <includes local="no">boost/geometry/geometries/box.hpp</includes>
    <includes local="no">boost/geometry/geometries/point_xy.hpp</includes>
    <includes local="no">boost/geometry/geometries/polygon.hpp</includes>
    <includes local="no">deque</includes>
    <includes local="no">lanelet2_extension_psim/io/autoware_osm_parser.hpp</includes>
    <includes local="no">lanelet2_extension_psim/projection/mgrs_projector.hpp</includes>
    <includes local="no">lanelet2_extension_psim/utility/message_conversion.hpp</includes>
    <includes local="no">lanelet2_extension_psim/utility/query.hpp</includes>
    <includes local="no">lanelet2_extension_psim/utility/utilities.hpp</includes>
    <includes local="no">lanelet2_extension_psim/visualization/visualization.hpp</includes>
    <includes local="no">memory</includes>
    <includes local="no">scenario_simulator_exception/exception.hpp</includes>
    <includes local="no">set</includes>
    <includes local="no">string</includes>
    <includes refid="color__utils_8hpp" local="no">traffic_simulator/color_utils/color_utils.hpp</includes>
    <includes refid="hdmap__utils_8hpp" local="no">traffic_simulator/hdmap_utils/hdmap_utils.hpp</includes>
    <includes refid="catmull__rom__spline_8hpp" local="no">traffic_simulator/math/catmull_rom_spline.hpp</includes>
    <includes refid="hermite__curve_8hpp" local="no">traffic_simulator/math/hermite_curve.hpp</includes>
    <includes refid="transfrom_8hpp" local="no">traffic_simulator/math/transfrom.hpp</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="6093">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="6134">
        <label>traffic_simulator/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
        <childnode refid="6135" relation="include">
        </childnode>
        <childnode refid="6136" relation="include">
        </childnode>
        <childnode refid="6137" relation="include">
        </childnode>
      </node>
      <node id="6118">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="6100">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="6117">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="6109">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="6104">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="6119">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="6135">
        <label>autoware_perception_msgs/msg/lamp_state.hpp</label>
      </node>
      <node id="6084">
        <label>boost/geometry/geometries/polygon.hpp</label>
      </node>
      <node id="6128">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="6078">
        <label>boost/archive/binary_iarchive.hpp</label>
      </node>
      <node id="6097">
        <label>cassert</label>
      </node>
      <node id="6137">
        <label>stdexcept</label>
      </node>
      <node id="6095">
        <label>string</label>
      </node>
      <node id="6090">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="6121">
        <label>traffic_simulator/hdmap_utils/cache.hpp</label>
        <link refid="cache_8hpp_source"/>
        <childnode refid="6116" relation="include">
        </childnode>
        <childnode refid="6122" relation="include">
        </childnode>
        <childnode refid="6123" relation="include">
        </childnode>
        <childnode refid="6093" relation="include">
        </childnode>
        <childnode refid="6124" relation="include">
        </childnode>
        <childnode refid="6133" relation="include">
        </childnode>
        <childnode refid="6131" relation="include">
        </childnode>
      </node>
      <node id="6099">
        <label>map</label>
      </node>
      <node id="6126">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="6127" relation="include">
        </childnode>
        <childnode refid="6076" relation="include">
        </childnode>
        <childnode refid="6116" relation="include">
        </childnode>
        <childnode refid="6122" relation="include">
        </childnode>
        <childnode refid="6128" relation="include">
        </childnode>
        <childnode refid="6129" relation="include">
        </childnode>
        <childnode refid="6130" relation="include">
        </childnode>
        <childnode refid="6131" relation="include">
        </childnode>
      </node>
      <node id="6096">
        <label>traffic_simulator/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="6097" relation="include">
        </childnode>
        <childnode refid="6098" relation="include">
        </childnode>
        <childnode refid="6099" relation="include">
        </childnode>
        <childnode refid="6100" relation="include">
        </childnode>
        <childnode refid="6095" relation="include">
        </childnode>
      </node>
      <node id="6072">
        <label>lanelet2_core/utility/Units.h</label>
      </node>
      <node id="6120">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="6108">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="6113">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="6101">
        <label>traffic_simulator/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="6102" relation="include">
        </childnode>
        <childnode refid="6103" relation="include">
        </childnode>
        <childnode refid="6104" relation="include">
        </childnode>
        <childnode refid="6105" relation="include">
        </childnode>
        <childnode refid="6106" relation="include">
        </childnode>
        <childnode refid="6107" relation="include">
        </childnode>
        <childnode refid="6108" relation="include">
        </childnode>
        <childnode refid="6109" relation="include">
        </childnode>
        <childnode refid="6110" relation="include">
        </childnode>
        <childnode refid="6111" relation="include">
        </childnode>
        <childnode refid="6112" relation="include">
        </childnode>
        <childnode refid="6113" relation="include">
        </childnode>
        <childnode refid="6114" relation="include">
        </childnode>
        <childnode refid="6115" relation="include">
        </childnode>
        <childnode refid="6116" relation="include">
        </childnode>
        <childnode refid="6117" relation="include">
        </childnode>
        <childnode refid="6118" relation="include">
        </childnode>
        <childnode refid="6088" relation="include">
        </childnode>
        <childnode refid="6089" relation="include">
        </childnode>
        <childnode refid="6090" relation="include">
        </childnode>
        <childnode refid="6099" relation="include">
        </childnode>
        <childnode refid="6092" relation="include">
        </childnode>
        <childnode refid="6119" relation="include">
        </childnode>
        <childnode refid="6120" relation="include">
        </childnode>
        <childnode refid="6095" relation="include">
        </childnode>
        <childnode refid="6121" relation="include">
        </childnode>
        <childnode refid="6126" relation="include">
        </childnode>
        <childnode refid="6134" relation="include">
        </childnode>
        <childnode refid="6133" relation="include">
        </childnode>
        <childnode refid="6132" relation="include">
        </childnode>
        <childnode refid="6131" relation="include">
        </childnode>
        <childnode refid="6138" relation="include">
        </childnode>
      </node>
      <node id="6125">
        <label>exception</label>
      </node>
      <node id="6083">
        <label>boost/geometry/geometries/point_xy.hpp</label>
      </node>
      <node id="6079">
        <label>boost/archive/binary_oarchive.hpp</label>
      </node>
      <node id="6102">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="6129">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="6139">
        <label>traffic_simulator/math/transfrom.hpp</label>
        <link refid="transfrom_8hpp_source"/>
        <childnode refid="6128" relation="include">
        </childnode>
      </node>
      <node id="6107">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="6089">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="6080">
        <label>boost/assign/list_of.hpp</label>
      </node>
      <node id="6071">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/hdmap_utils/hdmap_utils.cpp</label>
        <link refid="hdmap__utils_8cpp"/>
        <childnode refid="6072" relation="include">
        </childnode>
        <childnode refid="6073" relation="include">
        </childnode>
        <childnode refid="6074" relation="include">
        </childnode>
        <childnode refid="6075" relation="include">
        </childnode>
        <childnode refid="6076" relation="include">
        </childnode>
        <childnode refid="6077" relation="include">
        </childnode>
        <childnode refid="6078" relation="include">
        </childnode>
        <childnode refid="6079" relation="include">
        </childnode>
        <childnode refid="6080" relation="include">
        </childnode>
        <childnode refid="6081" relation="include">
        </childnode>
        <childnode refid="6082" relation="include">
        </childnode>
        <childnode refid="6083" relation="include">
        </childnode>
        <childnode refid="6084" relation="include">
        </childnode>
        <childnode refid="6085" relation="include">
        </childnode>
        <childnode refid="6086" relation="include">
        </childnode>
        <childnode refid="6087" relation="include">
        </childnode>
        <childnode refid="6088" relation="include">
        </childnode>
        <childnode refid="6089" relation="include">
        </childnode>
        <childnode refid="6090" relation="include">
        </childnode>
        <childnode refid="6091" relation="include">
        </childnode>
        <childnode refid="6092" relation="include">
        </childnode>
        <childnode refid="6093" relation="include">
        </childnode>
        <childnode refid="6094" relation="include">
        </childnode>
        <childnode refid="6095" relation="include">
        </childnode>
        <childnode refid="6096" relation="include">
        </childnode>
        <childnode refid="6101" relation="include">
        </childnode>
        <childnode refid="6124" relation="include">
        </childnode>
        <childnode refid="6126" relation="include">
        </childnode>
        <childnode refid="6139" relation="include">
        </childnode>
        <childnode refid="6133" relation="include">
        </childnode>
        <childnode refid="6132" relation="include">
        </childnode>
        <childnode refid="6131" relation="include">
        </childnode>
      </node>
      <node id="6076">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="6088">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="6122">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="6098">
        <label>cstdio</label>
      </node>
      <node id="6131">
        <label>vector</label>
      </node>
      <node id="6115">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="6127">
        <label>gtest/gtest.h</label>
      </node>
      <node id="6132">
        <label>utility</label>
      </node>
      <node id="6074">
        <label>lanelet2_io/io_handlers/Serialize.h</label>
      </node>
      <node id="6130">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="6131" relation="include">
        </childnode>
      </node>
      <node id="6111">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="6124">
        <label>traffic_simulator/math/catmull_rom_spline.hpp</label>
        <link refid="catmull__rom__spline_8hpp_source"/>
        <childnode refid="6125" relation="include">
        </childnode>
        <childnode refid="6122" relation="include">
        </childnode>
        <childnode refid="6095" relation="include">
        </childnode>
        <childnode refid="6126" relation="include">
        </childnode>
        <childnode refid="6132" relation="include">
        </childnode>
        <childnode refid="6131" relation="include">
        </childnode>
      </node>
      <node id="6106">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="6136">
        <label>iostream</label>
      </node>
      <node id="6103">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="6085">
        <label>deque</label>
      </node>
      <node id="6133">
        <label>unordered_map</label>
      </node>
      <node id="6114">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="6075">
        <label>lanelet2_projection/UTM.h</label>
      </node>
      <node id="6138">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="6123">
        <label>mutex</label>
      </node>
      <node id="6105">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="6087">
        <label>lanelet2_extension_psim/projection/mgrs_projector.hpp</label>
      </node>
      <node id="6110">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="6091">
        <label>lanelet2_extension_psim/visualization/visualization.hpp</label>
      </node>
      <node id="6116">
        <label>boost/optional.hpp</label>
      </node>
      <node id="6112">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="6081">
        <label>boost/geometry.hpp</label>
      </node>
      <node id="6086">
        <label>lanelet2_extension_psim/io/autoware_osm_parser.hpp</label>
      </node>
      <node id="6094">
        <label>set</label>
      </node>
      <node id="6077">
        <label>algorithm</label>
      </node>
      <node id="6082">
        <label>boost/geometry/geometries/box.hpp</label>
      </node>
      <node id="6073">
        <label>lanelet2_io/Io.h</label>
      </node>
      <node id="6092">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehdmap__utils">hdmap_utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lanelet2_core/utility/Units.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lanelet2_io/Io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lanelet2_io/io_handlers/Serialize.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lanelet2_projection/UTM.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;quaternion_operation/quaternion_operation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/archive/binary_iarchive.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/archive/binary_oarchive.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/assign/list_of.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/geometry.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/geometry/geometries/box.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/geometry/geometries/point_xy.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/geometry/geometries/polygon.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lanelet2_extension_psim/io/autoware_osm_parser.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lanelet2_extension_psim/projection/mgrs_projector.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lanelet2_extension_psim/utility/message_conversion.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lanelet2_extension_psim/utility/query.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lanelet2_extension_psim/utility/utilities.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lanelet2_extension_psim/visualization/visualization.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;scenario_simulator_exception/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/color_utils/color_utils.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/hdmap_utils/hdmap_utils.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/catmull_rom_spline.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/hermite_curve.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/transfrom.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehdmap__utils" kindref="compound">hdmap_utils</ref></highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal">HdMapUtils::HdMapUtils(</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::filesystem::path<sp/>&amp;<sp/>lanelet2_map_path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>geographic_msgs::msg::GeoPoint<sp/>&amp;<sp/>origin)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>(void)origin;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>lanelet::projection::MGRSProjector<sp/>projector;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>lanelet::ErrorMessages<sp/>errors;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>lanelet_map_ptr_<sp/>=<sp/>lanelet::load(lanelet2_map_path.string(),<sp/>projector,<sp/>&amp;errors);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>errors.empty())<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>*<sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>error<sp/>:<sp/>errors)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>separator<sp/>&lt;&lt;<sp/>error;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>separator<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>load<sp/>lanelet<sp/>map<sp/>(&quot;</highlight><highlight class="normal">,<sp/>ss.str(),<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>overwriteLaneletsCenterline();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>traffic_rules_vehicle_ptr_<sp/>=<sp/>lanelet::traffic_rules::TrafficRulesFactory::create(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::Locations::Germany,<sp/>lanelet::Participants::Vehicle);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>vehicle_routing_graph_ptr_<sp/>=</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::routing::RoutingGraph::build(*lanelet_map_ptr_,<sp/>*traffic_rules_vehicle_ptr_);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>traffic_rules_pedestrian_ptr_<sp/>=<sp/>lanelet::traffic_rules::TrafficRulesFactory::create(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::Locations::Germany,<sp/>lanelet::Participants::Pedestrian);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>pedestrian_routing_graph_ptr_<sp/>=</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::routing::RoutingGraph::build(*lanelet_map_ptr_,<sp/>*traffic_rules_pedestrian_ptr_);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>std::vector&lt;lanelet::routing::RoutingGraphConstPtr&gt;<sp/>all_graphs;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>all_graphs.push_back(vehicle_routing_graph_ptr_);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>all_graphs.push_back(pedestrian_routing_graph_ptr_);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getLaneletIds()</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet<sp/>:<sp/>lanelet_map_ptr_-&gt;laneletLayer)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.emplace_back(lanelet.id());</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>HdMapUtils::getLaneletPolygon(std::int64_t<sp/>lanelet_id)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>points;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>lanelet::CompoundPolygon3d<sp/>lanelet_polygon<sp/>=</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id).polygon3d();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet_point<sp/>:<sp/>lanelet_polygon)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>lanelet_point.x();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>lanelet_point.y();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>p.z<sp/>=<sp/>lanelet_point.z();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>points.emplace_back(p);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>points;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HdMapUtils::getHeight(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>openscenario_msgs::msg::LaneletPose<sp/>&amp;<sp/>lanelet_pose)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toMapPose(lanelet_pose).pose.position.z;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">boost::optional&lt;double&gt;<sp/>HdMapUtils::getCollisionPointInLaneCoordinate(</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/>std::int64_t<sp/>crossing_lanelet_id)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bg<sp/>=<sp/>boost::geometry;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Point<sp/>=<sp/>bg::model::d2::point_xy&lt;double&gt;;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Line<sp/>=<sp/>bg::model::linestring&lt;Point&gt;;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Polygon<sp/>=<sp/>bg::model::polygon&lt;Point,<sp/>false&gt;;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>center_points<sp/>=<sp/>getCenterPoints(lanelet_id);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>std::vector&lt;Point&gt;<sp/>path_collision_points;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>lanelet_map_ptr_-&gt;laneletLayer.get(crossing_lanelet_id);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>lanelet::CompoundPolygon3d<sp/>lanelet_polygon<sp/>=</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet_map_ptr_-&gt;laneletLayer.get(crossing_lanelet_id).polygon3d();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>Polygon<sp/>crosswalk_polygon;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet_point<sp/>:<sp/>lanelet_polygon)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>crosswalk_polygon.outer().push_back(bg::make&lt;Point&gt;(lanelet_point.x(),<sp/>lanelet_point.y()));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>crosswalk_polygon.outer().push_back(crosswalk_polygon.outer().front());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s_in_lanelet<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>center_points.size()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/>center_points.at(i);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>center_points.at(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Line<sp/>line{{p0.x,<sp/>p0.y},<sp/>{p1.x,<sp/>p1.y}};</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>line_length<sp/>=</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(std::pow(p0.x<sp/>-<sp/>p1.x,<sp/>2)<sp/>+<sp/>std::pow(p0.y<sp/>-<sp/>p1.y,<sp/>2)<sp/>+<sp/>std::pow(p0.z<sp/>-<sp/>p1.z,<sp/>2));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Point&gt;<sp/>line_collision_points;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>bg::intersection(crosswalk_polygon,<sp/>line,<sp/>line_collision_points);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line_collision_points.empty())<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>dist;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>line_collision_points.size();<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s_in_line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(p1.x<sp/>-<sp/>p0.x)<sp/>&lt;<sp/>DBL_EPSILON)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(p1.y<sp/>-<sp/>p1.y<sp/>&lt;<sp/>DBL_EPSILON))<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_in_line<sp/>=<sp/>(line_collision_points[j].y()<sp/>-<sp/>p0.y)<sp/>/<sp/>(p1.y<sp/>-<sp/>p0.y);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_in_lanelet<sp/>+<sp/>s_in_line<sp/>*<sp/>line_length;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_in_line<sp/>=<sp/>(line_collision_points[j].x()<sp/>-<sp/>p0.x)<sp/>/<sp/>(p1.x<sp/>-<sp/>p0.x);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_in_lanelet<sp/>+<sp/>s_in_line<sp/>*<sp/>line_length;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>s_in_lanelet<sp/>=<sp/>s_in_lanelet<sp/>+<sp/>line_length;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getConflictingLaneIds(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>lanelet_ids)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="164"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet_id<sp/>:<sp/>lanelet_ids)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conflicting_lanelets<sp/>=</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet::utils::getConflictingLanelets(vehicle_routing_graph_ptr_,<sp/>lanelet);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>conflicting_lanelet<sp/>:<sp/>conflicting_lanelets)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(conflicting_lanelet.id());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getConflictingCrosswalkIds(</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>lanelet_ids)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="179"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>std::vector&lt;lanelet::routing::RoutingGraphConstPtr&gt;<sp/>graphs;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>graphs.emplace_back(vehicle_routing_graph_ptr_);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>graphs.emplace_back(pedestrian_routing_graph_ptr_);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>lanelet::routing::RoutingGraphContainer<sp/>container(graphs);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet_id<sp/>:<sp/>lanelet_ids)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>height_clearance<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>routing_graph_id<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>conflicting_crosswalks<sp/>=</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>container.conflictingInGraph(lanelet,<sp/>routing_graph_id,<sp/>height_clearance);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>crosswalk<sp/>:<sp/>conflicting_crosswalks)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(crosswalk.id());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>HdMapUtils::clipTrajectoryFromLaneletIds(</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s,<sp/>std::vector&lt;std::int64_t&gt;<sp/>lanelet_ids,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>forward_distance)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>on_traj<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rest_distance<sp/>=<sp/>forward_distance;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>id_itr<sp/>=<sp/>lanelet_ids.begin();<sp/>id_itr<sp/>!=<sp/>lanelet_ids.end();<sp/>id_itr++)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>getLaneletLength(*id_itr);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(on_traj)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rest_distance<sp/>&lt;<sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s_val<sp/>=<sp/>0;<sp/>s_val<sp/>&lt;<sp/>rest_distance;<sp/>s_val<sp/>=<sp/>s_val<sp/>+<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_pose<sp/>=<sp/>toMapPose(*id_itr,<sp/>s_val,<sp/>0);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(map_pose.pose.position);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest_distance<sp/>=<sp/>rest_distance<sp/>-<sp/>l;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s_val<sp/>=<sp/>0;<sp/>s_val<sp/>&lt;<sp/>l;<sp/>s_val<sp/>=<sp/>s_val<sp/>+<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_pose<sp/>=<sp/>toMapPose(*id_itr,<sp/>s_val,<sp/>0);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(map_pose.pose.position);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_id<sp/>==<sp/>*id_itr)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>on_traj<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>+<sp/>forward_distance)<sp/>&lt;<sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s_val<sp/>=<sp/>s;<sp/>s_val<sp/>&lt;<sp/>s<sp/>+<sp/>forward_distance;<sp/>s_val<sp/>=<sp/>s_val<sp/>+<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_pose<sp/>=<sp/>toMapPose(lanelet_id,<sp/>s_val,<sp/>0);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(map_pose.pose.position);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rest_distance<sp/>=<sp/>rest_distance<sp/>-<sp/>(l<sp/>-<sp/>s);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s_val<sp/>=<sp/>s;<sp/>s_val<sp/>&lt;<sp/>l;<sp/>s_val<sp/>=<sp/>s_val<sp/>+<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map_pose<sp/>=<sp/>toMapPose(lanelet_id,<sp/>s_val,<sp/>0);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(map_pose.pose.position);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">std::vector&lt;std::pair&lt;double,<sp/>lanelet::Lanelet&gt;&gt;<sp/>HdMapUtils::excludeSubtypeLaneletsWithDistance(</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;double,<sp/>lanelet::Lanelet&gt;&gt;<sp/>&amp;<sp/>lls,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>subtype[])</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;double,<sp/>lanelet::Lanelet&gt;&gt;<sp/>exclude_subtype_lanelets;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>ll<sp/>:<sp/>lls)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ll.second.hasAttribute(lanelet::AttributeName::Subtype))<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet::Attribute<sp/>attr<sp/>=<sp/>ll.second.attribute(lanelet::AttributeName::Subtype);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attr.value()<sp/>!=<sp/>subtype)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exclude_subtype_lanelets.push_back(ll);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exclude_subtype_lanelets;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">boost::optional&lt;openscenario_msgs::msg::LaneletPose&gt;<sp/>HdMapUtils::toLaneletPose(</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_crosswalk)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet_id<sp/>=<sp/>getClosetLaneletId(pose,<sp/>include_crosswalk);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/>getCenterPointsSpline(lanelet_id.get());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>spline-&gt;getSValue(pose.position);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pose_on_centerline<sp/>=<sp/>spline-&gt;getPose(s.get());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rpy<sp/>=<sp/>quaternion_operation::convertQuaternionToEulerAngle(</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>quaternion_operation::getRotation(pose_on_centerline.orientation,<sp/>pose.orientation));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>spline-&gt;getSquaredDistanceIn2D(pose.position,<sp/>s.get());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>lanelet_pose;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>lanelet_pose.lanelet_id<sp/>=<sp/>lanelet_id.get();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>lanelet_pose.s<sp/>=<sp/>s.get();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>lanelet_pose.offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>lanelet_pose.rpy<sp/>=<sp/>rpy;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lanelet_pose;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">boost::optional&lt;std::int64_t&gt;<sp/>HdMapUtils::getClosetLaneletId(</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance_thresh,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_crosswalk)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>lanelet::BasicPoint2d<sp/>search_point(pose.position.x,<sp/>pose.position.y);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>std::vector&lt;std::pair&lt;double,<sp/>lanelet::Lanelet&gt;&gt;<sp/>nearest_lanelet<sp/>=</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::geometry::findNearest(lanelet_map_ptr_-&gt;laneletLayer,<sp/>search_point,<sp/>3);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(include_crosswalk)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nearest_lanelet.empty())<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nearest_lanelet.front().first<sp/>&gt;<sp/>distance_thresh)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::Lanelet<sp/>closest_lanelet;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>closest_lanelet<sp/>=<sp/>nearest_lanelet.front().second;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>closest_lanelet.id();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nearest_road_lanelet<sp/>=</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>excludeSubtypeLaneletsWithDistance(nearest_lanelet,<sp/>lanelet::AttributeValueString::Crosswalk);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nearest_road_lanelet.empty())<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nearest_road_lanelet.front().first<sp/>&gt;<sp/>distance_thresh)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::Lanelet<sp/>closest_lanelet;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>closest_lanelet<sp/>=<sp/>nearest_road_lanelet.front().second;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>closest_lanelet.id();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HdMapUtils::getSpeedLimit(std::vector&lt;std::int64_t&gt;<sp/>lanelet_ids)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>limits;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_ids.empty())<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;size<sp/>of<sp/>the<sp/>vector<sp/>lanelet<sp/>ids<sp/>should<sp/>be<sp/>more<sp/>than<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>itr<sp/>=<sp/>lanelet_ids.begin();<sp/>itr<sp/>!=<sp/>lanelet_ids.end();<sp/>itr++)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(*itr);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/>traffic_rules_vehicle_ptr_-&gt;speedLimit(lanelet);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>limits.push_back(lanelet::units::KmHQuantity(limit.speedLimit).value()<sp/>/<sp/>3.6);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::min_element(limits.begin(),<sp/>limits.end());</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">boost::optional&lt;int&gt;<sp/>HdMapUtils::getLaneChangeableLaneletId(</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/>std::string<sp/>direction)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;left&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>left_lanelet<sp/>=<sp/>vehicle_routing_graph_ptr_-&gt;left(lanelet);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left_lanelet)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left_lanelet-&gt;id();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(direction<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;right&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right_lanelet<sp/>=<sp/>vehicle_routing_graph_ptr_-&gt;right(lanelet);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(right_lanelet)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>right_lanelet-&gt;id();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getPreviousLanelets(std::int64_t<sp/>lanelet_id,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_dist<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>ret.push_back(lanelet_id);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(total_dist<sp/>&lt;<sp/>distance)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ids<sp/>=<sp/>getPreviousLaneletIds(lanelet_id,<sp/></highlight><highlight class="stringliteral">&quot;straight&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ids.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet_id<sp/>=<sp/>ids[0];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_dist<sp/>=<sp/>total_dist<sp/>+<sp/>getLaneletLength(lanelet_id);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(lanelet_id);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>else_ids<sp/>=<sp/>getPreviousLaneletIds(lanelet_id);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(else_ids.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lanelet_id<sp/>=<sp/>else_ids[0];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_dist<sp/>=<sp/>total_dist<sp/>+<sp/>getLaneletLength(lanelet_id);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(lanelet_id);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HdMapUtils::isInRoute(std::int64_t<sp/>lanelet_id,<sp/>std::vector&lt;std::int64_t&gt;<sp/>route)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="374"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>route)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getFollowingLanelets(</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/>std::vector&lt;std::int64_t&gt;<sp/>candidate_lanelet_ids,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_self)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidate_lanelet_ids.empty())<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_dist<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>candidate_lanelet_ids)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(found)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_dist<sp/>=<sp/>total_dist<sp/>+<sp/>getLaneletLength(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_dist<sp/>&gt;<sp/>distance)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(include_self)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!found)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;lanelet<sp/>id<sp/>does<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_dist<sp/>&gt;<sp/>distance)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>end_lanelet<sp/>=<sp/>candidate_lanelet_ids[candidate_lanelet_ids.size()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>followings<sp/>=<sp/>getFollowingLanelets(end_lanelet,<sp/>distance<sp/>-<sp/>total_dist,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>std::copy(followings.begin(),<sp/>followings.end(),<sp/>std::back_inserter(ret));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getFollowingLanelets(</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>distance,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>include_self)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_dist<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(include_self)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(lanelet_id);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(total_dist<sp/>&lt;<sp/>distance)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>straight_ids<sp/>=<sp/>getNextLaneletIds(lanelet_id,<sp/></highlight><highlight class="stringliteral">&quot;straight&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(straight_ids.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet_id<sp/>=<sp/>straight_ids[0];</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_dist<sp/>=<sp/>total_dist<sp/>+<sp/>getLaneletLength(lanelet_id);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(lanelet_id);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ids<sp/>=<sp/>getNextLaneletIds(lanelet_id);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ids.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet_id<sp/>=<sp/>ids[0];</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_dist<sp/>=<sp/>total_dist<sp/>+<sp/>getLaneletLength(lanelet_id);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(lanelet_id);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getRoute(</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>from_lanelet_id,<sp/>std::int64_t<sp/>to_lanelet_id)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(route_cache_.exists(from_lanelet_id,<sp/>to_lanelet_id))<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>route_cache_.getRoute(from_lanelet_id,<sp/>to_lanelet_id);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(from_lanelet_id);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(to_lanelet_id);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>lanelet::Optional&lt;lanelet::routing::Route&gt;<sp/>route<sp/>=</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>vehicle_routing_graph_ptr_-&gt;getRoute(lanelet,<sp/>to_lanelet,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!route)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>route_cache_.appendData(from_lanelet_id,<sp/>to_lanelet_id,<sp/>ret);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>lanelet::routing::LaneletPath<sp/>shortest_path<sp/>=<sp/>route-&gt;shortestPath();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shortest_path.empty())<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>route_cache_.appendData(from_lanelet_id,<sp/>to_lanelet_id,<sp/>ret);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lane_itr<sp/>=<sp/>shortest_path.begin();<sp/>lane_itr<sp/>!=<sp/>shortest_path.end();<sp/>lane_itr++)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(lane_itr-&gt;id());</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>route_cache_.appendData(from_lanelet_id,<sp/>to_lanelet_id,<sp/>ret);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal">std::shared_ptr&lt;traffic_simulator::math::CatmullRomSpline&gt;<sp/>HdMapUtils::getCenterPointsSpline(</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id)</highlight></codeline>
<codeline lineno="478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>getCenterPoints(lanelet_id);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>center_points_cache_.getCenterPointsSpline(lanelet_id);</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>HdMapUtils::getCenterPoints(</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>lanelet_ids)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_ids.empty())<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet_id<sp/>:<sp/>lanelet_ids)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>center_points<sp/>=<sp/>getCenterPoints(lanelet_id);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(center_points.begin(),<sp/>center_points.end(),<sp/>std::back_inserter(ret));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>HdMapUtils::getCenterPoints(std::int64_t<sp/>lanelet_id)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lanelet_map_ptr_)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;lanelet<sp/>map<sp/>is<sp/>null<sp/>pointer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_map_ptr_-&gt;laneletLayer.empty())<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>THROW_SIMULATION_ERROR(</highlight><highlight class="stringliteral">&quot;lanelet<sp/>layer<sp/>is<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(center_points_cache_.exists(lanelet_id))<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>center_points_cache_.getCenterPoints(lanelet_id);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>centerline<sp/>=<sp/>lanelet.centerline();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>point<sp/>:<sp/>centerline)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>point.x();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>point.y();</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>p.z<sp/>=<sp/>point.z();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(p);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;int&gt;(ret.size())<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/>ret[0];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p2<sp/>=<sp/>ret[1];</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>p1;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>p1.x<sp/>=<sp/>(p0.x<sp/>+<sp/>p2.x)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>p1.y<sp/>=<sp/>(p0.y<sp/>+<sp/>p2.y)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>p1.z<sp/>=<sp/>(p0.z<sp/>+<sp/>p2.z)<sp/>*<sp/>0.5;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.clear();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(p0);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(p1);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(p2);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>center_points_cache_.appendData(lanelet_id,<sp/>ret);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HdMapUtils::getLaneletLength(std::int64_t<sp/>lanelet_id)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_length_cache_.exists(lanelet_id))<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lanelet_length_cache_.getLength(lanelet_id);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>lanelet::utils::getLaneletLength2d(lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id));</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>lanelet_length_cache_.appendData(lanelet_id,<sp/>ret);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getPreviousLaneletIds(std::int64_t<sp/>lanelet_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="546"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>previous_lanelets<sp/>=<sp/>vehicle_routing_graph_ptr_-&gt;previous(lanelet);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>llt<sp/>:<sp/>previous_lanelets)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(llt.id());</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getPreviousLaneletIds(</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/>std::string<sp/>turn_direction)</highlight></codeline>
<codeline lineno="558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>previous_lanelets<sp/>=<sp/>vehicle_routing_graph_ptr_-&gt;previous(lanelet);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>llt<sp/>:<sp/>previous_lanelets)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>turn_direction_llt<sp/>=<sp/>llt.attributeOr(</highlight><highlight class="stringliteral">&quot;turn_direction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;else&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(turn_direction_llt<sp/>==<sp/>turn_direction)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(llt.id());</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getNextLaneletIds(std::int64_t<sp/>lanelet_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="572"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>following_lanelets<sp/>=<sp/>vehicle_routing_graph_ptr_-&gt;following(lanelet);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>llt<sp/>:<sp/>following_lanelets)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(llt.id());</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getNextLaneletIds(</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/>std::string<sp/>turn_direction)</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>following_lanelets<sp/>=<sp/>vehicle_routing_graph_ptr_-&gt;following(lanelet);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>llt<sp/>:<sp/>following_lanelets)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>turn_direction_llt<sp/>=<sp/>llt.attributeOr(</highlight><highlight class="stringliteral">&quot;turn_direction&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;else&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(turn_direction_llt<sp/>==<sp/>turn_direction)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(llt.id());</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getTrafficLightIds()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="598"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>lanelet::ConstLanelets<sp/>all_lanelets<sp/>=<sp/>lanelet::utils::query::laneletLayer(lanelet_map_ptr_);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>autoware_traffic_lights<sp/>=<sp/>lanelet::utils::query::autowareTrafficLights(all_lanelets);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>light<sp/>:<sp/>autoware_traffic_lights)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>light_string<sp/>:<sp/>light-&gt;lightBulbs())<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(light_string.hasAttribute(</highlight><highlight class="stringliteral">&quot;traffic_light_id&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>light_string.attribute(</highlight><highlight class="stringliteral">&quot;traffic_light_id&quot;</highlight><highlight class="normal">).asId();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.</highlight><highlight class="keyword">get</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::optional&lt;geometry_msgs::msg::Point&gt;<sp/>HdMapUtils::getTrafficLightBulbPosition(</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>traffic_light_id,<sp/>traffic_simulator::TrafficLightColor<sp/>color)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="617"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color<sp/>==<sp/>traffic_simulator::TrafficLightColor::NONE)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>lanelet::ConstLanelets<sp/>all_lanelets<sp/>=<sp/>lanelet::utils::query::laneletLayer(lanelet_map_ptr_);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>autoware_traffic_lights<sp/>=<sp/>lanelet::utils::query::autowareTrafficLights(all_lanelets);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>light<sp/>:<sp/>autoware_traffic_lights)<sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>light_string<sp/>:<sp/>light-&gt;lightBulbs())<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(light_string.hasAttribute(</highlight><highlight class="stringliteral">&quot;traffic_light_id&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>light_string.attribute(</highlight><highlight class="stringliteral">&quot;traffic_light_id&quot;</highlight><highlight class="normal">).asId();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.</highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/>==<sp/>traffic_light_id)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>light_bulbs<sp/>=<sp/>light-&gt;lightBulbs();</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ls<sp/>:<sp/>light_bulbs)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lanelet::ConstLineString3d<sp/>l<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">lanelet::ConstLineString3d</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ls);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pt<sp/>:<sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pt.hasAttribute(</highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>color_string;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(color)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>traffic_simulator::TrafficLightColor::GREEN:</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;green&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>traffic_simulator::TrafficLightColor::YELLOW:</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;yellow&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>traffic_simulator::TrafficLightColor::RED:</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_string<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>traffic_simulator::TrafficLightColor::NONE:</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lanelet::Attribute<sp/>attr<sp/>=<sp/>pt.attribute(</highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attr.value().compare(color_string)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>point;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.x<sp/>=<sp/>pt.x();</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.y<sp/>=<sp/>pt.y();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point.z<sp/>=<sp/>pt.z();</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>point;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">boost::optional&lt;std::pair&lt;traffic_simulator::math::HermiteCurve,<sp/>double&gt;&gt;</highlight></codeline>
<codeline lineno="668"><highlight class="normal">HdMapUtils::getLaneChangeTrajectory(</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>from_pose,<sp/>std::int64_t<sp/>to_lanelet_id,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maximum_curvature_threshold,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_trajectory_length,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>forward_distance_threshold)</highlight></codeline>
<codeline lineno="672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>to_length<sp/>=<sp/>getLaneletLength(to_lanelet_id);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>evaluation,<sp/>target_s;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>std::vector&lt;traffic_simulator::math::HermiteCurve&gt;<sp/>curves;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>to_s<sp/>=<sp/>0;<sp/>to_s<sp/>&lt;<sp/>to_length;<sp/>to_s<sp/>=<sp/>to_s<sp/>+<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>goal_pose<sp/>=<sp/>toMapPose(to_lanelet_id,<sp/>to_s,<sp/>0);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>traffic_simulator::math::getRelativePose(from_pose,<sp/>goal_pose.pose).position.x<sp/>&lt;=</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>forward_distance_threshold)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start_to_goal_dist<sp/>=<sp/>std::sqrt(</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(from_pose.position.x<sp/>-<sp/>goal_pose.pose.position.x,<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(from_pose.position.y<sp/>-<sp/>goal_pose.pose.position.y,<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::pow(from_pose.position.z<sp/>-<sp/>goal_pose.pose.position.z,<sp/>2));</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traj<sp/>=<sp/>getLaneChangeTrajectory(from_pose,<sp/>to_lanelet_id,<sp/>to_s,<sp/>start_to_goal_dist<sp/>*<sp/>0.5);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(traj.getMaximum2DCurvature()<sp/>&lt;<sp/>maximum_curvature_threshold)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eval<sp/>=<sp/>std::fabs(target_trajectory_length<sp/>-<sp/>traj.getLength());</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>evaluation.push_back(eval);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>curves.push_back(traj);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_s.push_back(to_s);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(evaluation.empty())<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;::iterator<sp/>min_itr<sp/>=<sp/>std::min_element(evaluation.begin(),<sp/>evaluation.end());</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>min_index<sp/>=<sp/>std::distance(evaluation.begin(),<sp/>min_itr);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(curves[min_index],<sp/>target_s[min_index]);</highlight></codeline>
<codeline lineno="702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><ref refid="classtraffic__simulator_1_1math_1_1HermiteCurve" kindref="compound">traffic_simulator::math::HermiteCurve</ref><sp/>HdMapUtils::getLaneChangeTrajectory(</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>from_pose,<sp/>std::int64_t<sp/>to_lanelet_id,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>to_s,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tangent_vector_size)</highlight></codeline>
<codeline lineno="707"><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_vec<sp/>=<sp/>getTangentVector(to_lanelet_id,<sp/>to_s);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>goal_pose<sp/>=<sp/>toMapPose(to_lanelet_id,<sp/>to_s,<sp/>0);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>start_vec<sp/>=<sp/>getVectorFromPose(from_pose,<sp/>tangent_vector_size);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>goal_vec<sp/>=<sp/>to_vec.get();</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>goal_vec.x<sp/>=<sp/>goal_vec.x<sp/>*<sp/>tangent_vector_size;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>goal_vec.y<sp/>=<sp/>goal_vec.y<sp/>*<sp/>tangent_vector_size;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>goal_vec.z<sp/>=<sp/>goal_vec.z<sp/>*<sp/>tangent_vector_size;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1HermiteCurve" kindref="compound">traffic_simulator::math::HermiteCurve</ref><sp/>curve(from_pose,<sp/>goal_pose.pose,<sp/>start_vec,<sp/>goal_vec);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>curve;</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal">geometry_msgs::msg::Vector3<sp/>HdMapUtils::getVectorFromPose(</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>pose,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>magnitude)</highlight></codeline>
<codeline lineno="722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>dir<sp/>=</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>quaternion_operation::convertQuaternionToEulerAngle(pose.orientation);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>vector;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>vector.x<sp/>=<sp/>magnitude<sp/>*<sp/>std::cos(dir.z);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>vector.y<sp/>=<sp/>magnitude<sp/>*<sp/>std::sin(dir.z);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>vector.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vector;</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HdMapUtils::isInLanelet(std::int64_t<sp/>lanelet_id,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s)</highlight></codeline>
<codeline lineno="733"><highlight class="normal">{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/>getCenterPointsSpline(lanelet_id);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>spline-&gt;getLength();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&gt;<sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal">std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>HdMapUtils::toMapPoints(</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/>std::vector&lt;double&gt;<sp/>s)</highlight></codeline>
<codeline lineno="746"><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/>getCenterPointsSpline(lanelet_id);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>s_value<sp/>:<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(spline-&gt;getPoint(s_value));</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal">geometry_msgs::msg::PoseStamped<sp/>HdMapUtils::toMapPose(</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset,<sp/>geometry_msgs::msg::Quaternion<sp/>quat)</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::PoseStamped<sp/>ret;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>ret.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>spline<sp/>=<sp/>getCenterPointsSpline(lanelet_id);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>ret.pose<sp/>=<sp/>spline-&gt;getPose(s);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tangent_vec<sp/>=<sp/>spline-&gt;getTangentVector(s);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>rpy;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>rpy.x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>rpy.y<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>rpy.z<sp/>=<sp/>std::atan2(tangent_vec.y,<sp/>tangent_vec.x)<sp/>+<sp/>M_PI_2;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>rpy<sp/>=<sp/>quaternion_operation::convertQuaternionToEulerAngle(</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>quaternion_operation::convertEulerAngleToQuaternion(rpy)<sp/>*<sp/>quat);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>ret.pose.position.x<sp/>=<sp/>ret.pose.position.x<sp/>-<sp/>std::sin(rpy.z)<sp/>*<sp/>offset;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>ret.pose.position.y<sp/>=<sp/>ret.pose.position.y<sp/>-<sp/>std::cos(rpy.z)<sp/>*<sp/>offset;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>ret.pose.position.z<sp/>=<sp/>ret.pose.position.z;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>rpy.z<sp/>=<sp/>rpy.z<sp/>-<sp/>M_PI_2;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>ret.pose.orientation<sp/>=<sp/>quaternion_operation::convertEulerAngleToQuaternion(rpy);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">geometry_msgs::msg::PoseStamped<sp/>HdMapUtils::toMapPose(</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>lanelet_pose)</highlight></codeline>
<codeline lineno="779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toMapPose(</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet_pose.lanelet_id,<sp/>lanelet_pose.s,<sp/>lanelet_pose.offset,</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>quaternion_operation::convertEulerAngleToQuaternion(lanelet_pose.rpy));</highlight></codeline>
<codeline lineno="783"><highlight class="normal">}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal">geometry_msgs::msg::PoseStamped<sp/>HdMapUtils::toMapPose(</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset)</highlight></codeline>
<codeline lineno="787"><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>lanelet_pose;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>lanelet_pose.lanelet_id<sp/>=<sp/>lanelet_id;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>lanelet_pose.s<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>lanelet_pose.offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toMapPose(lanelet_pose);</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">boost::optional&lt;geometry_msgs::msg::Vector3&gt;<sp/>HdMapUtils::getTangentVector(</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>lanelet_id,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s)</highlight></codeline>
<codeline lineno="797"><highlight class="normal">{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getCenterPointsSpline(lanelet_id)-&gt;getTangentVector(s);</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HdMapUtils::canChangeLane(std::int64_t<sp/>from_lanelet_id,<sp/>std::int64_t<sp/>to_lanelet_id)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>from_lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(from_lanelet_id);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(to_lanelet_id);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traffic_rules_vehicle_ptr_-&gt;canChangeLane(from_lanelet,<sp/>to_lanelet);</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">boost::optional&lt;double&gt;<sp/>HdMapUtils::getLongitudinalDistance(</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>openscenario_msgs::msg::LaneletPose<sp/>from,<sp/>openscenario_msgs::msg::LaneletPose<sp/>to)</highlight></codeline>
<codeline lineno="810"><highlight class="normal">{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getLongitudinalDistance(from.lanelet_id,<sp/>from.s,<sp/>to.lanelet_id,<sp/>to.s);</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal">boost::optional&lt;double&gt;<sp/>HdMapUtils::getLongitudinalDistance(</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>from_lanelet_id,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>from_s,<sp/>std::int64_t<sp/>to_lanelet_id,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>to_s)</highlight></codeline>
<codeline lineno="816"><highlight class="normal">{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from_lanelet_id<sp/>==<sp/>to_lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from_s<sp/>&gt;<sp/>to_s)<sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_s<sp/>-<sp/>from_s;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>route<sp/>=<sp/>getRoute(from_lanelet_id,<sp/>to_lanelet_id);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(route.empty())<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet_id<sp/>:<sp/>route)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_id<sp/>==<sp/>from_lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist<sp/>+<sp/>getLaneletLength(from_lanelet_id)<sp/>-<sp/>from_s;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lanelet_id<sp/>==<sp/>to_lanelet_id)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist<sp/>+<sp/>to_s;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dist<sp/>=<sp/>dist<sp/>+<sp/>getLaneletLength(lanelet_id);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist;</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>autoware_auto_msgs::msg::HADMapBin<sp/>HdMapUtils::toMapBin()</highlight></codeline>
<codeline lineno="842"><highlight class="normal">{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>boost::archive::binary_oarchive<sp/>oa(ss);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>oa<sp/>&lt;&lt;<sp/>*lanelet_map_ptr_;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>id_counter<sp/>=<sp/>lanelet::utils::getId();</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>oa<sp/>&lt;&lt;<sp/>id_counter;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>std::string<sp/>tmp_str<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>autoware_auto_msgs::msg::HADMapBin<sp/>msg;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>msg.data.clear();</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>msg.data.resize(tmp_str.size());</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>msg.data.assign(tmp_str.begin(),<sp/>tmp_str.end());</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>msg.header.frame_id<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg;</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HdMapUtils::insertMarkerArray(</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>visualization_msgs::msg::MarkerArray<sp/>&amp;<sp/>a1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>visualization_msgs::msg::MarkerArray<sp/>&amp;<sp/>a2)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="859"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>a1.markers.insert(a1.markers.end(),<sp/>a2.markers.begin(),<sp/>a2.markers.end());</highlight></codeline>
<codeline lineno="861"><highlight class="normal">}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>visualization_msgs::msg::MarkerArray<sp/>HdMapUtils::generateMarker()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="864"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>visualization_msgs::msg::MarkerArray<sp/>markers;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>lanelet::ConstLanelets<sp/>all_lanelets<sp/>=<sp/>lanelet::utils::query::laneletLayer(lanelet_map_ptr_);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>lanelet::ConstLanelets<sp/>road_lanelets<sp/>=<sp/>lanelet::utils::query::roadLanelets(all_lanelets);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>lanelet::ConstLanelets<sp/>crosswalk_lanelets<sp/>=</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::utils::query::crosswalkLanelets(all_lanelets);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>lanelet::ConstLanelets<sp/>walkway_lanelets<sp/>=<sp/>lanelet::utils::query::walkwayLanelets(all_lanelets);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>std::vector&lt;lanelet::ConstLineString3d&gt;<sp/>stop_lines<sp/>=</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::utils::query::stopLinesLanelets(road_lanelets);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>std::vector&lt;lanelet::AutowareTrafficLightConstPtr&gt;<sp/>aw_tl_reg_elems<sp/>=</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::utils::query::autowareTrafficLights(all_lanelets);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>std::vector&lt;lanelet::DetectionAreaConstPtr&gt;<sp/>da_reg_elems<sp/>=</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::utils::query::detectionAreas(all_lanelets);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>lanelet::ConstLineStrings3d<sp/>parking_spaces<sp/>=</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::utils::query::getAllParkingSpaces(lanelet_map_ptr_);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>lanelet::ConstPolygons3d<sp/>parking_lots<sp/>=</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::utils::query::getAllParkingLots(lanelet_map_ptr_);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cl_ll_borders<sp/>=<sp/>color_utils::fromRgba(1.0,<sp/>1.0,<sp/>1.0,<sp/>0.999);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cl_road<sp/>=<sp/>color_utils::fromRgba(0.2,<sp/>0.7,<sp/>0.7,<sp/>0.3);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cl_cross<sp/>=<sp/>color_utils::fromRgba(0.2,<sp/>0.7,<sp/>0.2,<sp/>0.3);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cl_stoplines<sp/>=<sp/>color_utils::fromRgba(1.0,<sp/>0.0,<sp/>0.0,<sp/>0.5);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cl_trafficlights<sp/>=<sp/>color_utils::fromRgba(0.7,<sp/>0.7,<sp/>0.7,<sp/>0.8);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cl_detection_areas<sp/>=<sp/>color_utils::fromRgba(0.7,<sp/>0.7,<sp/>0.7,<sp/>0.3);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cl_parking_lots<sp/>=<sp/>color_utils::fromRgba(0.7,<sp/>0.7,<sp/>0.0,<sp/>0.3);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cl_parking_spaces<sp/>=<sp/>color_utils::fromRgba(1.0,<sp/>0.647,<sp/>0.0,<sp/>0.6);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cl_lanelet_id<sp/>=<sp/>color_utils::fromRgba(0.8,<sp/>0.2,<sp/>0.2,<sp/>0.999);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::visualization::laneletsBoundaryAsMarkerArray(road_lanelets,<sp/>cl_ll_borders,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::visualization::laneletsAsTriangleMarkerArray(</highlight><highlight class="stringliteral">&quot;road_lanelets&quot;</highlight><highlight class="normal">,<sp/>road_lanelets,<sp/>cl_road));</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,<sp/>lanelet::visualization::laneletsAsTriangleMarkerArray(</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;crosswalk_lanelets&quot;</highlight><highlight class="normal">,<sp/>crosswalk_lanelets,<sp/>cl_cross));</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,<sp/>lanelet::visualization::laneletsAsTriangleMarkerArray(</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;walkway_lanelets&quot;</highlight><highlight class="normal">,<sp/>walkway_lanelets,<sp/>cl_cross));</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>insertMarkerArray(markers,<sp/>lanelet::visualization::laneletDirectionAsMarkerArray(road_lanelets));</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::visualization::lineStringsAsMarkerArray(stop_lines,<sp/></highlight><highlight class="stringliteral">&quot;stop_lines&quot;</highlight><highlight class="normal">,<sp/>cl_stoplines));</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>lanelet::visualization::autowareTrafficLightsAsMarkerArray(aw_tl_reg_elems,<sp/>cl_trafficlights));</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,<sp/>lanelet::visualization::detectionAreasAsMarkerArray(da_reg_elems,<sp/>cl_detection_areas));</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,<sp/>lanelet::visualization::parkingLotsAsMarkerArray(parking_lots,<sp/>cl_parking_lots));</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,<sp/>lanelet::visualization::parkingSpacesAsMarkerArray(parking_spaces,<sp/>cl_parking_spaces));</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,<sp/>lanelet::visualization::generateLaneletIdMarker(road_lanelets,<sp/>cl_lanelet_id));</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>insertMarkerArray(</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>markers,<sp/>lanelet::visualization::generateLaneletIdMarker(crosswalk_lanelets,<sp/>cl_lanelet_id));</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>markers;</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HdMapUtils::overwriteLaneletsCenterline()</highlight></codeline>
<codeline lineno="925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet_obj<sp/>:<sp/>lanelet_map_ptr_-&gt;laneletLayer)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lanelet_obj.hasCustomCenterline())<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fine_center_line<sp/>=<sp/>generateFineCenterline(lanelet_obj,<sp/>2.0);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet_obj.setCenterline(fine_center_line);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal">std::pair&lt;size_t,<sp/>size_t&gt;<sp/>HdMapUtils::findNearestIndexPair(</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>accumulated_lengths,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_length)</highlight></codeline>
<codeline lineno="936"><highlight class="normal">{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>accumulated_lengths.size();</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Front</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_length<sp/>&lt;<sp/>accumulated_lengths.at(1))<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(0,<sp/>1);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_length<sp/>&gt;<sp/>accumulated_lengths.at(N<sp/>-<sp/>2))<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(N<sp/>-<sp/>2,<sp/>N<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Middle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accumulated_lengths.at(i<sp/>-<sp/>1)<sp/>&lt;=<sp/>target_length<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>target_length<sp/>&lt;=<sp/>accumulated_lengths.at(i))<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(i<sp/>-<sp/>1,<sp/>i);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Throw<sp/>an<sp/>exception<sp/>because<sp/>this<sp/>never<sp/>happens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;findNearestIndexPair():<sp/>No<sp/>nearest<sp/>point<sp/>found.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_map&lt;std::int64_t,<sp/>std::vector&lt;std::int64_t&gt;&gt;</highlight></codeline>
<codeline lineno="962"><highlight class="normal">HdMapUtils::getRightOfWayLaneletIds(std::vector&lt;std::int64_t&gt;<sp/>lanelet_ids)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="963"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;std::int64_t,<sp/>std::vector&lt;std::int64_t&gt;&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet_id<sp/>:<sp/>lanelet_ids)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.emplace(lanelet_id,<sp/>getRightOfWayLaneletIds(lanelet_id));</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getRightOfWayLaneletIds(std::int64_t<sp/>lanelet_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="972"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>assigned_lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right_of_ways<sp/>=<sp/>assigned_lanelet.regulatoryElementsAs&lt;lanelet::RightOfWay&gt;();</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>right_of_way<sp/>:<sp/>right_of_ways)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right_of_Way_lanelets<sp/>=<sp/>right_of_way-&gt;rightOfWayLanelets();</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>ll<sp/>:<sp/>right_of_Way_lanelets)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(ll.id());</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal">std::vector&lt;std::shared_ptr&lt;const<sp/>lanelet::TrafficSign&gt;&gt;</highlight></codeline>
<codeline lineno="986"><highlight class="normal">HdMapUtils::getTrafficSignRegElementsOnPath(std::vector&lt;std::int64_t&gt;<sp/>lanelet_ids)</highlight></codeline>
<codeline lineno="987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;const<sp/>lanelet::TrafficSign&gt;&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet_id<sp/>:<sp/>lanelet_ids)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_signs<sp/>=<sp/>lanelet.regulatoryElementsAs&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lanelet::TrafficSign&gt;();</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_sign<sp/>:<sp/>traffic_signs)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(traffic_sign);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal">std::vector&lt;std::shared_ptr&lt;const<sp/>lanelet::autoware::AutowareTrafficLight&gt;&gt;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">HdMapUtils::getTrafficLightRegElementsOnPath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>lanelet_ids)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1001"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;const<sp/>lanelet::autoware::AutowareTrafficLight&gt;&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>lanelet_id<sp/>:<sp/>lanelet_ids)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lanelet<sp/>=<sp/>lanelet_map_ptr_-&gt;laneletLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_lights<sp/>=</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet.regulatoryElementsAs&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lanelet::autoware::AutowareTrafficLight&gt;();</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_light<sp/>:<sp/>traffic_lights)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(traffic_light);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">std::vector&lt;lanelet::ConstLineString3d&gt;<sp/>HdMapUtils::getStopLinesOnPath(</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>lanelet_ids)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>std::vector&lt;lanelet::ConstLineString3d&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_signs<sp/>=<sp/>getTrafficSignRegElementsOnPath(lanelet_ids);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>traffic_sign<sp/>:<sp/>traffic_signs)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(traffic_sign-&gt;type()<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;stop_sign&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>stop_line<sp/>:<sp/>traffic_sign-&gt;refLines())<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(stop_line);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal">lanelet::AutowareTrafficLightConstPtr<sp/>HdMapUtils::getTrafficLight(</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>traffic_light_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1032"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>lanelet::ConstLanelets<sp/>all_lanelets<sp/>=<sp/>lanelet::utils::query::laneletLayer(lanelet_map_ptr_);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>autoware_traffic_lights<sp/>=<sp/>lanelet::utils::query::autowareTrafficLights(all_lanelets);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>light<sp/>:<sp/>autoware_traffic_lights)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>light_string<sp/>:<sp/>light-&gt;lightBulbs())<sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(light_string.hasAttribute(</highlight><highlight class="stringliteral">&quot;traffic_light_id&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>light_string.attribute(</highlight><highlight class="stringliteral">&quot;traffic_light_id&quot;</highlight><highlight class="normal">).asId();</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>light;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>THROW_SEMANTIC_ERROR(</highlight><highlight class="stringliteral">&quot;traffic_light_id<sp/>does<sp/>not<sp/>match.<sp/>ID<sp/>:<sp/>&quot;</highlight><highlight class="normal">,<sp/>traffic_light_id);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::optional&lt;std::int64_t&gt;<sp/>HdMapUtils::getTrafficLightStopLineId(</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>&amp;<sp/>traffic_light_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1050"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_light<sp/>=<sp/>getTrafficLight(traffic_light_id);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(traffic_light-&gt;stopLine())<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traffic_light-&gt;stopLine()-&gt;id();</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>HdMapUtils::getTrafficLightStopLinePoints(</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>std::int64_t<sp/>traffic_light_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1060"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_light<sp/>=<sp/>getTrafficLight(traffic_light_id);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stop_line<sp/>=<sp/>traffic_light-&gt;stopLine();</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stop_line)<sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>point<sp/>:<sp/>stop_line.get())<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>point.x();</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>point.y();</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.z<sp/>=<sp/>point.z();</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(p);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>HdMapUtils::getStopLinePolygon(std::int64_t<sp/>lanelet_id)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>points;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stop_line<sp/>=<sp/>lanelet_map_ptr_-&gt;lineStringLayer.get(lanelet_id);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>point<sp/>:<sp/>stop_line)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>point.x();</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>point.y();</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>p.z<sp/>=<sp/>point.z();</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>points.emplace_back(p);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>points;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>HdMapUtils::getTrafficLightIdsOnPath(</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>route_lanelets)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1092"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_lights<sp/>=<sp/>getTrafficLightRegElementsOnPath(route_lanelets);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_light<sp/>:<sp/>traffic_lights)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>light_string<sp/>:<sp/>traffic_light-&gt;lightBulbs())<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(light_string.hasAttribute(</highlight><highlight class="stringliteral">&quot;traffic_light_id&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>light_string.attribute(</highlight><highlight class="stringliteral">&quot;traffic_light_id&quot;</highlight><highlight class="normal">).asId();</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.</highlight><highlight class="keyword">get</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::optional&lt;double&gt;<sp/>HdMapUtils::getDistanceToTrafficLightStopLine(</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>route_lanelets,</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>&amp;<sp/>waypoints)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1111"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>traffic_light_ids<sp/>=<sp/>getTrafficLightIdsOnPath(route_lanelets);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(traffic_light_ids.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>std::set&lt;double&gt;<sp/>collision_points;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>traffic_light_ids)<sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collision_point<sp/>=<sp/>getDistanceToTrafficLightStopLine(waypoints,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_point)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>collision_points.insert(collision_point.get());</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_points.empty())<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*collision_points.begin();</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::optional&lt;double&gt;<sp/>HdMapUtils::getDistanceToTrafficLightStopLine(</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>&amp;<sp/>waypoints,</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::int64_t<sp/>&amp;<sp/>traffic_light_id)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1132"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waypoints.empty())<sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref><sp/>spline(waypoints);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stop_line<sp/>=<sp/>getTrafficLightStopLinePoints(traffic_light_id);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stop_line.size()<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collision_point<sp/>=<sp/>spline.getCollisionPointIn2D(stop_line);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>collision_point;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal">boost::optional&lt;double&gt;<sp/>HdMapUtils::getDistanceToStopLine(</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::int64_t&gt;<sp/>&amp;<sp/>route_lanelets,</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>&amp;<sp/>waypoints)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waypoints.empty())<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>std::set&lt;double&gt;<sp/>collision_points;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waypoints.empty())<sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1CatmullRomSpline" kindref="compound">traffic_simulator::math::CatmullRomSpline</ref><sp/>spline(waypoints);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stop_lines<sp/>=<sp/>getStopLinesOnPath({route_lanelets});</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>stop_line<sp/>:<sp/>stop_lines)<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;geometry_msgs::msg::Point&gt;<sp/>stop_line_points;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>point<sp/>:<sp/>stop_line)<sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.x<sp/>=<sp/>point.x();</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.y<sp/>=<sp/>point.y();</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.z<sp/>=<sp/>point.z();</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stop_line_points.emplace_back(p);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collision_point<sp/>=<sp/>spline.getCollisionPointIn2D(stop_line_points);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_point)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>collision_points.insert(collision_point.get());</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_points.empty())<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::none;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*collision_points.begin();</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal">std::vector&lt;double&gt;<sp/>HdMapUtils::calculateSegmentDistances(</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lanelet::ConstLineString3d<sp/>&amp;<sp/>line_string)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>segment_distances;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>segment_distances.reserve(line_string.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>line_string.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>lanelet::geometry::distance(line_string[i],<sp/>line_string[i<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>segment_distances.push_back(distance);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>segment_distances;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal">std::vector&lt;double&gt;<sp/>HdMapUtils::calculateAccumulatedLengths(</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lanelet::ConstLineString3d<sp/>&amp;<sp/>line_string)</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>segment_distances<sp/>=<sp/>calculateSegmentDistances(line_string);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>accumulated_lengths{0};</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>accumulated_lengths.reserve(segment_distances.size()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>std::partial_sum(</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>std::begin(segment_distances),<sp/>std::end(segment_distances),</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>std::back_inserter(accumulated_lengths));</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>accumulated_lengths;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">std::vector&lt;lanelet::BasicPoint3d&gt;<sp/>HdMapUtils::resamplePoints(</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lanelet::ConstLineString3d<sp/>&amp;<sp/>line_string,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>num_segments)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line_length<sp/>=<sp/>lanelet::geometry::length(line_string);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>accumulated<sp/>lengths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>accumulated_lengths<sp/>=<sp/>calculateAccumulatedLengths(line_string);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>each<sp/>segment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/>std::vector&lt;lanelet::BasicPoint3d&gt;<sp/>resampled_points;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>num_segments;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>two<sp/>nearest<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_length<sp/>=</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i)<sp/>/<sp/>num_segments)<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(line_length);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index_pair<sp/>=<sp/>findNearestIndexPair(accumulated_lengths,<sp/>target_length);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>linear<sp/>interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lanelet::BasicPoint3d<sp/>back_point<sp/>=<sp/>line_string[index_pair.first];</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lanelet::BasicPoint3d<sp/>front_point<sp/>=<sp/>line_string[index_pair.second];</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>direction_vector<sp/>=<sp/>(front_point<sp/>-<sp/>back_point);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>back_length<sp/>=<sp/>accumulated_lengths.at(index_pair.first);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>front_length<sp/>=<sp/>accumulated_lengths.at(index_pair.second);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>segment_length<sp/>=<sp/>front_length<sp/>-<sp/>back_length;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_point<sp/>=</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>back_point<sp/>+<sp/>(direction_vector<sp/>*<sp/>(target_length<sp/>-<sp/>back_length)<sp/>/<sp/>segment_length);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>to<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/>resampled_points.push_back(target_point);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resampled_points;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal">lanelet::LineString3d<sp/>HdMapUtils::generateFineCenterline(</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lanelet::ConstLanelet<sp/>&amp;<sp/>lanelet_obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>resolution)</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>length<sp/>of<sp/>longer<sp/>border</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>left_length<sp/>=</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lanelet::geometry::length(lanelet_obj.leftBound()));</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>right_length<sp/>=</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lanelet::geometry::length(lanelet_obj.rightBound()));</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>longer_distance<sp/>=<sp/>(left_length<sp/>&gt;<sp/>right_length)<sp/>?<sp/>left_length<sp/>:<sp/>right_length;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>num_segments<sp/>=</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>std::max(static_cast&lt;int32_t&gt;(ceil(longer_distance<sp/>/<sp/>resolution)),<sp/>1);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Resample<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>left_points<sp/>=<sp/>resamplePoints(lanelet_obj.leftBound(),<sp/>num_segments);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>right_points<sp/>=<sp/>resamplePoints(lanelet_obj.rightBound(),<sp/>num_segments);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>centerline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>lanelet::LineString3d<sp/>centerline(lanelet::utils::getId());</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;size_t&gt;(num_segments<sp/>+<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>ID<sp/>for<sp/>the<sp/>average<sp/>point<sp/>of<sp/>left<sp/>and<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>center_basic_point<sp/>=<sp/>(right_points.at(i)<sp/>+<sp/>left_points.at(i))<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lanelet::Point3d<sp/>center_point(</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lanelet::utils::getId(),<sp/>center_basic_point.x(),<sp/>center_basic_point.y(),</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>center_basic_point.z());</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>centerline.push_back(center_point);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>centerline;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal">std::vector&lt;double&gt;<sp/>HdMapUtils::calcEuclidDist(</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>z)</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>dist_v;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>dist_v.push_back(0.0);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.size()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dx<sp/>=<sp/>x.at(i<sp/>+<sp/>1)<sp/>-<sp/>x.at(i);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dy<sp/>=<sp/>y.at(i<sp/>+<sp/>1)<sp/>-<sp/>y.at(i);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dz<sp/>=<sp/>z.at(i<sp/>+<sp/>1)<sp/>-<sp/>z.at(i);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>std::sqrt(dx<sp/>*<sp/>dx<sp/>+<sp/>dy<sp/>*<sp/>dy<sp/>+<sp/>dz<sp/>*<sp/>dz);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>dist_v.push_back(dist_v.at(i)<sp/>+<sp/>d);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dist_v;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hdmap_utils</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/hdmap_utils/hdmap_utils.cpp"/>
  </compounddef>
</doxygen>
