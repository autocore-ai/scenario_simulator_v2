<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sim__model__time__delay_8cpp" kind="file" language="C++">
    <compoundname>sim_model_time_delay.cpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes refid="sim__model__time__delay_8hpp" local="no">traffic_simulator/vehicle_model/sim_model_time_delay.hpp</includes>
    <incdepgraph>
      <node id="7212">
        <label>traffic_simulator/vehicle_model/sim_model_time_delay.hpp</label>
        <link refid="sim__model__time__delay_8hpp"/>
        <childnode refid="7213" relation="include">
        </childnode>
        <childnode refid="7214" relation="include">
        </childnode>
        <childnode refid="7215" relation="include">
        </childnode>
        <childnode refid="7216" relation="include">
        </childnode>
        <childnode refid="7217" relation="include">
        </childnode>
        <childnode refid="7218" relation="include">
        </childnode>
        <childnode refid="7220" relation="include">
        </childnode>
      </node>
      <node id="7220">
        <label>traffic_simulator/vehicle_model/sim_model_util.hpp</label>
        <link refid="sim__model__util_8hpp_source"/>
        <childnode refid="7221" relation="include">
        </childnode>
      </node>
      <node id="7217">
        <label>queue</label>
      </node>
      <node id="7218">
        <label>traffic_simulator/vehicle_model/sim_model_interface.hpp</label>
        <link refid="sim__model__interface_8hpp"/>
        <childnode refid="7214" relation="include">
        </childnode>
        <childnode refid="7219" relation="include">
        </childnode>
      </node>
      <node id="7215">
        <label>eigen3/Eigen/LU</label>
      </node>
      <node id="7210">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/vehicle_model/sim_model_time_delay.cpp</label>
        <link refid="sim__model__time__delay_8cpp"/>
        <childnode refid="7211" relation="include">
        </childnode>
        <childnode refid="7212" relation="include">
        </childnode>
      </node>
      <node id="7219">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="7221">
        <label>math.h</label>
      </node>
      <node id="7216">
        <label>iostream</label>
      </node>
      <node id="7213">
        <label>deque</label>
      </node>
      <node id="7214">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="7211">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Autoware<sp/>Foundation.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="sim__model__time__delay_8hpp" kindref="compound">traffic_simulator/vehicle_model/sim_model_time_delay.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>SimModelTimeDelayTwist</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="classSimModelTimeDelayTwist_1a94d5790c17a8cf2348c6388400ffaaac" kindref="member">SimModelTimeDelayTwist::SimModelTimeDelayTwist</ref>(</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wz_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_rate_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wz_rate_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_delay,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_time_constant,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wz_delay,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wz_time_constant,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deadzone_delta_steer)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">:<sp/><ref refid="classSimModelInterface" kindref="compound">SimModelInterface</ref>(5<sp/></highlight><highlight class="comment">/*<sp/>dim<sp/>x<sp/>*/</highlight><highlight class="normal">,<sp/>2<sp/></highlight><highlight class="comment">/*<sp/>dim<sp/>u<sp/>*/</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>MIN_TIME_CONSTANT(0.03),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>vx_lim_(vx_lim),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>vx_rate_lim_(vx_rate_lim),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>wz_lim_(wz_lim),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>wz_rate_lim_(wz_rate_lim),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>vx_delay_(vx_delay),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>vx_time_constant_(std::max(vx_time_constant,<sp/>MIN_TIME_CONSTANT)),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>wz_delay_(wz_delay),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>wz_time_constant_(std::max(wz_time_constant,<sp/>MIN_TIME_CONSTANT)),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>deadzone_delta_steer_(deadzone_delta_steer)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vx_time_constant<sp/>&lt;<sp/>MIN_TIME_CONSTANT)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Settings<sp/>vx_time_constant<sp/>is<sp/>too<sp/>small,<sp/>replace<sp/>it<sp/>by<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MIN_TIME_CONSTANT</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wz_time_constant<sp/>&lt;<sp/>MIN_TIME_CONSTANT)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Settings<sp/>wz_time_constant<sp/>is<sp/>too<sp/>small,<sp/>replace<sp/>it<sp/>by<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MIN_TIME_CONSTANT</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>initializeInputQueue(dt);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelayTwist::getX()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::X);<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelayTwist::getY()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::Y);<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelayTwist::getYaw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::YAW);<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelayTwist::getVx()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX);<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelayTwist::getWz()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::WZ);<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelayTwist::getSteer()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimModelTimeDelayTwist::update(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>dt)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>delayed_input<sp/>=<sp/>Eigen::VectorXd::Zero(<ref refid="classSimModelInterface_1a205b3b7d99b9337365018afe1fc62ab0" kindref="member">dim_u_</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>vx_input_queue_.push_back(<ref refid="classSimModelInterface_1a604e3dfa204542874cb60bae9df70d97" kindref="member">input_</ref>(IDX_U::VX_DES));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>delayed_input(IDX_U::VX_DES)<sp/>=<sp/>vx_input_queue_.front();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>vx_input_queue_.pop_front();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>wz_input_queue_.push_back(<ref refid="classSimModelInterface_1a604e3dfa204542874cb60bae9df70d97" kindref="member">input_</ref>(IDX_U::WZ_DES));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>delayed_input(IDX_U::WZ_DES)<sp/>=<sp/>wz_input_queue_.front();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>wz_input_queue_.pop_front();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>use<sp/>deadzone_delta_steer<sp/>(Steer<sp/>IF<sp/>does<sp/>not<sp/>exist<sp/>in<sp/>this<sp/>model)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="classSimModelInterface_1a87f7865253cd118372cfc701215cf2df" kindref="member">updateRungeKutta</ref>(dt,<sp/>delayed_input);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimModelTimeDelayTwist::initializeInputQueue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>dt)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vx_input_queue_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(round(vx_delay_<sp/>/<sp/>dt));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vx_input_queue_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>vx_input_queue_.push_back(0.0);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wz_input_queue_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(round(wz_delay_<sp/>/<sp/>dt));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wz_input_queue_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>wz_input_queue_.push_back(0.0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">Eigen::VectorXd<sp/>SimModelTimeDelayTwist::calcModel(</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>input)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx<sp/>=<sp/>state(IDX::VX);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wz<sp/>=<sp/>state(IDX::WZ);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw<sp/>=<sp/>state(IDX::YAW);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_input_vx<sp/>=<sp/>input(IDX_U::VX_DES);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_input_wz<sp/>=<sp/>input(IDX_U::WZ_DES);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_vx_des<sp/>=<sp/>std::max(std::min(delay_input_vx,<sp/>vx_lim_),<sp/>-vx_lim_);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_wz_des<sp/>=<sp/>std::max(std::min(delay_input_wz,<sp/>wz_lim_),<sp/>-wz_lim_);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_rate<sp/>=<sp/>-(vx<sp/>-<sp/>delay_vx_des)<sp/>/<sp/>vx_time_constant_;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wz_rate<sp/>=<sp/>-(wz<sp/>-<sp/>delay_wz_des)<sp/>/<sp/>wz_time_constant_;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>vx_rate<sp/>=<sp/>std::min(vx_rate_lim_,<sp/>std::max(-vx_rate_lim_,<sp/>vx_rate));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>wz_rate<sp/>=<sp/>std::min(wz_rate_lim_,<sp/>std::max(-wz_rate_lim_,<sp/>wz_rate));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>d_state<sp/>=<sp/>Eigen::VectorXd::Zero(<ref refid="classSimModelInterface_1ada7a7551a27124e1ff650e47e6f18bf1" kindref="member">dim_x_</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>d_state(IDX::X)<sp/>=<sp/>vx<sp/>*<sp/>cos(yaw);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>d_state(IDX::Y)<sp/>=<sp/>vx<sp/>*<sp/>sin(yaw);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>d_state(IDX::YAW)<sp/>=<sp/>wz;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>d_state(IDX::VX)<sp/>=<sp/>vx_rate;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>d_state(IDX::WZ)<sp/>=<sp/>wz_rate;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d_state;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>SimModelTimeDelaySteer</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="classSimModelTimeDelaySteer_1a7bcb8d1a171d1e3db9d7da84d0c0f2b6" kindref="member">SimModelTimeDelaySteer::SimModelTimeDelaySteer</ref>(</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_rate_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer_rate_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wheelbase,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_delay,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_time_constant,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer_delay,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer_time_constant,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deadzone_delta_steer)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">:<sp/><ref refid="classSimModelInterface" kindref="compound">SimModelInterface</ref>(5<sp/></highlight><highlight class="comment">/*<sp/>dim<sp/>x<sp/>*/</highlight><highlight class="normal">,<sp/>2<sp/></highlight><highlight class="comment">/*<sp/>dim<sp/>u<sp/>*/</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>MIN_TIME_CONSTANT(0.03),</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>vx_lim_(vx_lim),</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>vx_rate_lim_(vx_rate_lim),</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>steer_lim_(steer_lim),</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>steer_rate_lim_(steer_rate_lim),</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>wheelbase_(wheelbase),</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>vx_delay_(vx_delay),</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>vx_time_constant_(std::max(vx_time_constant,<sp/>MIN_TIME_CONSTANT)),</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>steer_delay_(steer_delay),</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>steer_time_constant_(std::max(steer_time_constant,<sp/>MIN_TIME_CONSTANT)),</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>deadzone_delta_steer_(deadzone_delta_steer)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vx_time_constant<sp/>&lt;<sp/>MIN_TIME_CONSTANT)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Settings<sp/>vx_time_constant<sp/>is<sp/>too<sp/>small,<sp/>replace<sp/>it<sp/>by<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MIN_TIME_CONSTANT</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(steer_time_constant<sp/>&lt;<sp/>MIN_TIME_CONSTANT)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Settings<sp/>steer_time_constant<sp/>is<sp/>too<sp/>small,<sp/>replace<sp/>it<sp/>by<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MIN_TIME_CONSTANT</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>initializeInputQueue(dt);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteer::getX()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::X);<sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteer::getY()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::Y);<sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteer::getYaw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::YAW);<sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteer::getVx()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX);<sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteer::getWz()</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX)<sp/>*<sp/>std::tan(<ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::STEER))<sp/>/<sp/>wheelbase_;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteer::getSteer()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::STEER);<sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteer::update(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>dt)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>delayed_input<sp/>=<sp/>Eigen::VectorXd::Zero(<ref refid="classSimModelInterface_1a205b3b7d99b9337365018afe1fc62ab0" kindref="member">dim_u_</ref>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>vx_input_queue_.push_back(<ref refid="classSimModelInterface_1a604e3dfa204542874cb60bae9df70d97" kindref="member">input_</ref>(IDX_U::VX_DES));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>delayed_input(IDX_U::VX_DES)<sp/>=<sp/>vx_input_queue_.front();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>vx_input_queue_.pop_front();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>steer_input_queue_.push_back(<ref refid="classSimModelInterface_1a604e3dfa204542874cb60bae9df70d97" kindref="member">input_</ref>(IDX_U::STEER_DES));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>raw_steer_command<sp/>=<sp/>steer_input_queue_.front();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>delayed_input(IDX_U::STEER_DES)<sp/>=<sp/>sim_model_util::getDummySteerCommandWithFriction(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>getSteer(),<sp/>raw_steer_command,<sp/>deadzone_delta_steer_);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>steer_input_queue_.pop_front();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="classSimModelInterface_1a87f7865253cd118372cfc701215cf2df" kindref="member">updateRungeKutta</ref>(dt,<sp/>delayed_input);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteer::initializeInputQueue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>dt)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vx_input_queue_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(round(vx_delay_<sp/>/<sp/>dt));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vx_input_queue_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>vx_input_queue_.push_back(0.0);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>steer_input_queue_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(round(steer_delay_<sp/>/<sp/>dt));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>steer_input_queue_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>steer_input_queue_.push_back(0.0);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">Eigen::VectorXd<sp/>SimModelTimeDelaySteer::calcModel(</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>input)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel<sp/>=<sp/>state(IDX::VX);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw<sp/>=<sp/>state(IDX::YAW);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer<sp/>=<sp/>state(IDX::STEER);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_input_vel<sp/>=<sp/>input(IDX_U::VX_DES);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_input_steer<sp/>=<sp/>input(IDX_U::STEER_DES);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_vx_des<sp/>=<sp/>std::max(std::min(delay_input_vel,<sp/>vx_lim_),<sp/>-vx_lim_);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_steer_des<sp/>=<sp/>std::max(std::min(delay_input_steer,<sp/>steer_lim_),<sp/>-steer_lim_);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_rate<sp/>=<sp/>-(vel<sp/>-<sp/>delay_vx_des)<sp/>/<sp/>vx_time_constant_;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer_rate<sp/>=<sp/>-(steer<sp/>-<sp/>delay_steer_des)<sp/>/<sp/>steer_time_constant_;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>vx_rate<sp/>=<sp/>std::min(vx_rate_lim_,<sp/>std::max(-vx_rate_lim_,<sp/>vx_rate));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>steer_rate<sp/>=<sp/>std::min(steer_rate_lim_,<sp/>std::max(-steer_rate_lim_,<sp/>steer_rate));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>d_state<sp/>=<sp/>Eigen::VectorXd::Zero(<ref refid="classSimModelInterface_1ada7a7551a27124e1ff650e47e6f18bf1" kindref="member">dim_x_</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>d_state(IDX::X)<sp/>=<sp/>vel<sp/>*<sp/>cos(yaw);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>d_state(IDX::Y)<sp/>=<sp/>vel<sp/>*<sp/>sin(yaw);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>d_state(IDX::YAW)<sp/>=<sp/>vel<sp/>*<sp/>std::tan(steer)<sp/>/<sp/>wheelbase_;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>d_state(IDX::VX)<sp/>=<sp/>vx_rate;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>d_state(IDX::STEER)<sp/>=<sp/>steer_rate;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d_state;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="classSimModelTimeDelaySteerAccel_1aa73618d85c969c7135c279016ebcdf40" kindref="member">SimModelTimeDelaySteerAccel::SimModelTimeDelaySteerAccel</ref>(</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vx_rate_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer_rate_lim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wheelbase,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>acc_delay,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>acc_time_constant,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer_delay,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer_time_constant,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deadzone_delta_steer)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">:<sp/><ref refid="classSimModelInterface" kindref="compound">SimModelInterface</ref>(6<sp/></highlight><highlight class="comment">/*<sp/>dim<sp/>x<sp/>*/</highlight><highlight class="normal">,<sp/>3<sp/></highlight><highlight class="comment">/*<sp/>dim<sp/>u<sp/>*/</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>MIN_TIME_CONSTANT(0.03),</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>vx_lim_(vx_lim),</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>vx_rate_lim_(vx_rate_lim),</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>steer_lim_(steer_lim),</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>steer_rate_lim_(steer_rate_lim),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>wheelbase_(wheelbase),</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>acc_delay_(acc_delay),</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>acc_time_constant_(std::max(acc_time_constant,<sp/>MIN_TIME_CONSTANT)),</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>steer_delay_(steer_delay),</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>steer_time_constant_(std::max(steer_time_constant,<sp/>MIN_TIME_CONSTANT)),</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>deadzone_delta_steer_(deadzone_delta_steer)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acc_time_constant<sp/>&lt;<sp/>MIN_TIME_CONSTANT)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Settings<sp/>acc_time_constant<sp/>is<sp/>too<sp/>small,<sp/>replace<sp/>it<sp/>by&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MIN_TIME_CONSTANT</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(steer_time_constant<sp/>&lt;<sp/>MIN_TIME_CONSTANT)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Settings<sp/>steer_time_constant<sp/>is<sp/>too<sp/>small,<sp/>replace<sp/>it<sp/>by&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>MIN_TIME_CONSTANT</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>initializeInputQueue(dt);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteerAccel::getX()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::X);<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteerAccel::getY()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::Y);<sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteerAccel::getYaw()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::YAW);<sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteerAccel::getVx()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX);<sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteerAccel::getWz()</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX)<sp/>*<sp/>std::tan(<ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::STEER))<sp/>/<sp/>wheelbase_;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteerAccel::getSteer()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::STEER);<sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteerAccel::update(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>dt)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>delayed_input<sp/>=<sp/>Eigen::VectorXd::Zero(<ref refid="classSimModelInterface_1a205b3b7d99b9337365018afe1fc62ab0" kindref="member">dim_u_</ref>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>acc_input_queue_.push_back(<ref refid="classSimModelInterface_1a604e3dfa204542874cb60bae9df70d97" kindref="member">input_</ref>(IDX_U::ACCX_DES));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>delayed_input(IDX_U::ACCX_DES)<sp/>=<sp/>acc_input_queue_.front();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>acc_input_queue_.pop_front();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>steer_input_queue_.push_back(<ref refid="classSimModelInterface_1a604e3dfa204542874cb60bae9df70d97" kindref="member">input_</ref>(IDX_U::STEER_DES));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>raw_steer_command<sp/>=<sp/>steer_input_queue_.front();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>delayed_input(IDX_U::STEER_DES)<sp/>=<sp/>sim_model_util::getDummySteerCommandWithFriction(</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>getSteer(),<sp/>raw_steer_command,<sp/>deadzone_delta_steer_);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>steer_input_queue_.pop_front();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>delayed_input(IDX_U::DRIVE_SHIFT)<sp/>=<sp/><ref refid="classSimModelInterface_1a604e3dfa204542874cb60bae9df70d97" kindref="member">input_</ref>(IDX_U::DRIVE_SHIFT);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="classSimModelInterface_1a87f7865253cd118372cfc701215cf2df" kindref="member">updateRungeKutta</ref>(dt,<sp/>delayed_input);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clip<sp/>velocity<sp/>and<sp/>accel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delayed_input(IDX_U::DRIVE_SHIFT)<sp/>&gt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX)<sp/>=<sp/>std::max(0.0,<sp/>std::min(<ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX),<sp/>vx_lim_));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::abs((<ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX)<sp/>-<sp/>0.0))<sp/>&lt;<sp/>10e-9<sp/>||<sp/>std::abs((<ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX)<sp/>-<sp/>vx_lim_))<sp/>&lt;<sp/>10e-9)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::ACCX)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX)<sp/>=<sp/>std::min(0.0,<sp/>std::max(<ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX),<sp/>-vx_lim_));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::abs((<ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX)<sp/>-<sp/>0.0))<sp/>&lt;<sp/>10e-9<sp/>||</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::abs((<ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::VX)<sp/>-<sp/>(-vx_lim_)))<sp/>&lt;<sp/>10e-9)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSimModelInterface_1ad74e69984c97826011b5a273d3ff9cff" kindref="member">state_</ref>(IDX::ACCX)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimModelTimeDelaySteerAccel::initializeInputQueue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>dt)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vx_input_queue_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(round(acc_delay_<sp/>/<sp/>dt));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vx_input_queue_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>acc_input_queue_.push_back(0.0);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>steer_input_queue_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(round(steer_delay_<sp/>/<sp/>dt));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>steer_input_queue_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>steer_input_queue_.push_back(0.0);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">Eigen::VectorXd<sp/>SimModelTimeDelaySteerAccel::calcModel(</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::VectorXd<sp/>&amp;<sp/>input)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vel<sp/>=<sp/>state(IDX::VX);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>acc<sp/>=<sp/>state(IDX::ACCX);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yaw<sp/>=<sp/>state(IDX::YAW);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer<sp/>=<sp/>state(IDX::STEER);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_input_acc<sp/>=<sp/>input(IDX_U::ACCX_DES);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_input_steer<sp/>=<sp/>input(IDX_U::STEER_DES);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>drive_shift<sp/>=<sp/>input(IDX_U::DRIVE_SHIFT);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_acc_des<sp/>=<sp/>std::max(std::min(delay_input_acc,<sp/>vx_rate_lim_),<sp/>-vx_rate_lim_);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(drive_shift<sp/>&gt;=<sp/>0.0))<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>delay_acc_des<sp/>*=<sp/>-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>reverse<sp/>front-back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delay_steer_des<sp/>=<sp/>std::max(std::min(delay_input_steer,<sp/>steer_lim_),<sp/>-steer_lim_);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>accx_rate<sp/>=<sp/>-(acc<sp/>-<sp/>delay_acc_des)<sp/>/<sp/>acc_time_constant_;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>steer_rate<sp/>=<sp/>-(steer<sp/>-<sp/>delay_steer_des)<sp/>/<sp/>steer_time_constant_;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>acc<sp/>=<sp/>std::min(vx_rate_lim_,<sp/>std::max(-vx_rate_lim_,<sp/>acc));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>steer_rate<sp/>=<sp/>std::min(steer_rate_lim_,<sp/>std::max(-steer_rate_lim_,<sp/>steer_rate));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(drive_shift<sp/>&gt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>vel<sp/>=<sp/>std::max(0.0,<sp/>std::min(vel,<sp/>vx_lim_));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>vel<sp/>=<sp/>std::min(0.0,<sp/>std::max(vel,<sp/>-vx_lim_));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>Eigen::VectorXd<sp/>d_state<sp/>=<sp/>Eigen::VectorXd::Zero(<ref refid="classSimModelInterface_1ada7a7551a27124e1ff650e47e6f18bf1" kindref="member">dim_x_</ref>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>d_state(IDX::X)<sp/>=<sp/>vel<sp/>*<sp/>cos(yaw);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>d_state(IDX::Y)<sp/>=<sp/>vel<sp/>*<sp/>sin(yaw);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>d_state(IDX::YAW)<sp/>=<sp/>vel<sp/>*<sp/>std::tan(steer)<sp/>/<sp/>wheelbase_;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>d_state(IDX::VX)<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>d_state(IDX::STEER)<sp/>=<sp/>steer_rate;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>d_state(IDX::ACCX)<sp/>=<sp/>accx_rate;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d_state;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/vehicle_model/sim_model_time_delay.cpp"/>
  </compounddef>
</doxygen>
