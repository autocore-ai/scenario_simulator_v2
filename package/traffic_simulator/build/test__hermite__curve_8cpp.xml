<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="test__hermite__curve_8cpp" kind="file" language="C++">
    <compoundname>test_hermite_curve.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes refid="hermite__curve_8hpp" local="no">traffic_simulator/math/hermite_curve.hpp</includes>
    <incdepgraph>
      <node id="7290">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_hermite_curve.cpp</label>
        <link refid="test__hermite__curve_8cpp"/>
        <childnode refid="7291" relation="include">
        </childnode>
        <childnode refid="7292" relation="include">
        </childnode>
      </node>
      <node id="7296">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="7292">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="7291" relation="include">
        </childnode>
        <childnode refid="7293" relation="include">
        </childnode>
        <childnode refid="7294" relation="include">
        </childnode>
        <childnode refid="7295" relation="include">
        </childnode>
        <childnode refid="7296" relation="include">
        </childnode>
        <childnode refid="7297" relation="include">
        </childnode>
        <childnode refid="7298" relation="include">
        </childnode>
        <childnode refid="7299" relation="include">
        </childnode>
      </node>
      <node id="7297">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="7293">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="7295">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="7299">
        <label>vector</label>
      </node>
      <node id="7291">
        <label>gtest/gtest.h</label>
      </node>
      <node id="7298">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="7299" relation="include">
        </childnode>
      </node>
      <node id="7294">
        <label>boost/optional.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__hermite__curve_8cpp_1ac7597b59dd5f10314d7c78363f9889dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HermiteCurveTest, CheckCollisionToLine)</argsstring>
        <name>TEST</name>
        <param>
          <type>HermiteCurveTest</type>
        </param>
        <param>
          <type>CheckCollisionToLine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_hermite_curve.cpp" line="19" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_hermite_curve.cpp" bodystart="19" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="test__hermite__curve_8cpp_1a3a2605a013c1ad6efda55fb204eb7cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(HermiteCurveTest, getNewtonMethodStepSize)</argsstring>
        <name>TEST</name>
        <param>
          <type>HermiteCurveTest</type>
        </param>
        <param>
          <type>getNewtonMethodStepSize</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_hermite_curve.cpp" line="78" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_hermite_curve.cpp" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="test__hermite__curve_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_hermite_curve.cpp" line="80" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_hermite_curve.cpp" bodystart="80" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/hermite_curve.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">TEST(HermiteCurveTest,<sp/>CheckCollisionToLine)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Pose<sp/>start_pose,<sp/>goal_pose;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Vector3<sp/>start_vec,<sp/>goal_vec;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>goal_pose.position.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>start_vec.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>goal_vec.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1HermiteCurve" kindref="compound">traffic_simulator::math::HermiteCurve</ref><sp/>curve(start_pose,<sp/>goal_pose,<sp/>start_vec,<sp/>goal_vec);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getLength(),<sp/>1);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(0.1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(0.2,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(0.3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(0.4,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(0.5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(0.6,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(0.7,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(0.8,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(0.9,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.get2DCurvature(1.0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>0);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getPoint(0.5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).x,<sp/>0.5);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getTangentVector(0.5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).x,<sp/>1);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(curve.getMaximum2DCurvature(),<sp/>0);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>geometry_msgs::msg::Point<sp/>p;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>p.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>p.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>p.z<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(curve.getSValue(p,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>EXPECT_TRUE((curve.getSValue(p,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).get()<sp/>&gt;<sp/>0.099)<sp/>&amp;&amp;<sp/>(curve.getSValue(p,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).get()<sp/>&lt;<sp/>0.101));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>start;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>start.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>start.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>goal;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>goal.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>goal.y<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collision_s<sp/>=<sp/>curve.getCollisionPointIn2D(start,<sp/>goal);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(curve.getCollisionPointIn2D({}));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(curve.getCollisionPointIn2D({start}));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(collision_s);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_s)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(collision_s.get(),<sp/>0.1);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>start;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>start.x<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>start.y<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>geometry_msgs::msg::Point<sp/>goal;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>goal.x<sp/>=<sp/>0.2;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>goal.y<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>collision_s<sp/>=<sp/>curve.getCollisionPointIn2D(start,<sp/>goal);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(collision_s);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(collision_s)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_DOUBLE_EQ(collision_s.get(),<sp/>0.15);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">TEST(HermiteCurveTest,<sp/>getNewtonMethodStepSize)<sp/>{}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>argv)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_hermite_curve.cpp"/>
  </compounddef>
</doxygen>
