<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="test__polynominal__solver_8cpp" kind="file" language="C++">
    <compoundname>test_polynominal_solver.cpp</compoundname>
    <includes local="no">gtest/gtest.h</includes>
    <includes local="no">scenario_simulator_exception/exception.hpp</includes>
    <includes refid="hermite__curve_8hpp" local="no">traffic_simulator/math/hermite_curve.hpp</includes>
    <includes refid="polynomial__solver_8hpp" local="no">traffic_simulator/math/polynomial_solver.hpp</includes>
    <incdepgraph>
      <node id="7303">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="7301">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp</label>
        <link refid="test__polynominal__solver_8cpp"/>
        <childnode refid="7302" relation="include">
        </childnode>
        <childnode refid="7303" relation="include">
        </childnode>
        <childnode refid="7304" relation="include">
        </childnode>
        <childnode refid="7310" relation="include">
        </childnode>
      </node>
      <node id="7308">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="7304">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="7302" relation="include">
        </childnode>
        <childnode refid="7305" relation="include">
        </childnode>
        <childnode refid="7306" relation="include">
        </childnode>
        <childnode refid="7307" relation="include">
        </childnode>
        <childnode refid="7308" relation="include">
        </childnode>
        <childnode refid="7309" relation="include">
        </childnode>
        <childnode refid="7310" relation="include">
        </childnode>
        <childnode refid="7311" relation="include">
        </childnode>
      </node>
      <node id="7309">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="7305">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="7307">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="7311">
        <label>vector</label>
      </node>
      <node id="7302">
        <label>gtest/gtest.h</label>
      </node>
      <node id="7310">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="7311" relation="include">
        </childnode>
      </node>
      <node id="7306">
        <label>boost/optional.hpp</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__polynominal__solver_8cpp_1a87562a9f2698fbf736547f9f375f50a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkValuetWithTorelance</definition>
        <argsstring>(double value, double expected, double torelance)</argsstring>
        <name>checkValuetWithTorelance</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>double</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>double</type>
          <declname>torelance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" line="21" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" bodystart="21" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="test__polynominal__solver_8cpp_1adacec95389e309f2ff62c1a620ddce8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PolynomialSolverTest, LinearFunction)</argsstring>
        <name>TEST</name>
        <param>
          <type>PolynomialSolverTest</type>
        </param>
        <param>
          <type>LinearFunction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" line="32" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="test__polynominal__solver_8cpp_1a9a41fbc6a249b350e217c42bcb68d05b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PolynomialSolverTest, SolveLinearEquation)</argsstring>
        <name>TEST</name>
        <param>
          <type>PolynomialSolverTest</type>
        </param>
        <param>
          <type>SolveLinearEquation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" line="40" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" bodystart="40" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="test__polynominal__solver_8cpp_1a039af0afaf4bef7f8f0adf7fce65f3f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PolynomialSolverTest, QuadraticFunction)</argsstring>
        <name>TEST</name>
        <param>
          <type>PolynomialSolverTest</type>
        </param>
        <param>
          <type>QuadraticFunction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" line="53" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="test__polynominal__solver_8cpp_1a7c80de16e3be82df97c3a4135b15d526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PolynomialSolverTest, SolveQuadraticEquation)</argsstring>
        <name>TEST</name>
        <param>
          <type>PolynomialSolverTest</type>
        </param>
        <param>
          <type>SolveQuadraticEquation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" line="61" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" bodystart="61" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="test__polynominal__solver_8cpp_1aa05a99cccaa7ca07e3203db5da92b164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PolynomialSolverTest, SolveCubicEquation)</argsstring>
        <name>TEST</name>
        <param>
          <type>PolynomialSolverTest</type>
        </param>
        <param>
          <type>SolveCubicEquation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" line="80" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" bodystart="80" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="test__polynominal__solver_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" line="103" column="1" bodyfile="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp" bodystart="103" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gtest/gtest.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;scenario_simulator_exception/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/hermite_curve.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/math/polynomial_solver.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkValuetWithTorelance(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>expected,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>torelance)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(torelance<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::logic_error(</highlight><highlight class="stringliteral">&quot;torelance<sp/>should<sp/>be<sp/>over<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::fabs(value<sp/>-<sp/>expected)<sp/>&lt;<sp/>torelance)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">TEST(PolynomialSolverTest,<sp/>LinearFunction)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver" kindref="compound">traffic_simulator::math::PolynomialSolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1ad1b1c41fae1a2ec8ed95620be735f793" kindref="member">linearFunction</ref>(1,<sp/>1,<sp/>2),<sp/>3);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1ad1b1c41fae1a2ec8ed95620be735f793" kindref="member">linearFunction</ref>(1,<sp/>0,<sp/>2),<sp/>2);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1ad1b1c41fae1a2ec8ed95620be735f793" kindref="member">linearFunction</ref>(0,<sp/>0,<sp/>2),<sp/>0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">TEST(PolynomialSolverTest,<sp/>SolveLinearEquation)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver" kindref="compound">traffic_simulator::math::PolynomialSolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>-20;<sp/>a<sp/>&lt;<sp/>20;<sp/>a<sp/>=<sp/>a<sp/>+<sp/>0.1)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>-20;<sp/>b<sp/>&lt;<sp/>20;<sp/>b<sp/>=<sp/>b<sp/>+<sp/>0.1)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1accecc4a13acd2695435994058d63e6c4" kindref="member">solveLinearEquation</ref>(a,<sp/>b,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>solution<sp/>:<sp/>ret)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(checkValuetWithTorelance(solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1ad1b1c41fae1a2ec8ed95620be735f793" kindref="member">linearFunction</ref>(a,<sp/>b,<sp/>solution),<sp/>0.0,<sp/>1e-10));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">TEST(PolynomialSolverTest,<sp/>QuadraticFunction)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver" kindref="compound">traffic_simulator::math::PolynomialSolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1a1bd94f2c7c0254e09e3ce0f265719e90" kindref="member">quadraticFunction</ref>(1,<sp/>1,<sp/>1,<sp/>2),<sp/>7);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1a1bd94f2c7c0254e09e3ce0f265719e90" kindref="member">quadraticFunction</ref>(1,<sp/>1,<sp/>0,<sp/>2),<sp/>6);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1a1bd94f2c7c0254e09e3ce0f265719e90" kindref="member">quadraticFunction</ref>(0,<sp/>0,<sp/>0,<sp/>2),<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">TEST(PolynomialSolverTest,<sp/>SolveQuadraticEquation)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver" kindref="compound">traffic_simulator::math::PolynomialSolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>-20;<sp/>a<sp/>&lt;<sp/>20;<sp/>a<sp/>=<sp/>a<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>-20;<sp/>b<sp/>&lt;<sp/>20;<sp/>b<sp/>=<sp/>b<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>-20;<sp/>c<sp/>&lt;<sp/>20;<sp/>c<sp/>=<sp/>c<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1acfcb4a0ad94ff495575f5e7df56493fb" kindref="member">solveQuadraticEquation</ref>(</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(a),<sp/>static_cast&lt;double&gt;(b),<sp/>static_cast&lt;double&gt;(c),<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>solution<sp/>:<sp/>ret)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(checkValuetWithTorelance(</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1a1bd94f2c7c0254e09e3ce0f265719e90" kindref="member">quadraticFunction</ref>(</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(a),<sp/>static_cast&lt;double&gt;(b),<sp/>static_cast&lt;double&gt;(c),<sp/>solution),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1e-10));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">TEST(PolynomialSolverTest,<sp/>SolveCubicEquation)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver" kindref="compound">traffic_simulator::math::PolynomialSolver</ref><sp/>solver;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>-10;<sp/>a<sp/>&lt;<sp/>10;<sp/>a<sp/>=<sp/>a<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>-10;<sp/>b<sp/>&lt;<sp/>10;<sp/>b<sp/>=<sp/>b<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>-10;<sp/>c<sp/>&lt;<sp/>10;<sp/>c<sp/>=<sp/>c<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>-10;<sp/>d<sp/>&lt;<sp/>10;<sp/>d<sp/>=<sp/>d<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1a4b580418d1f04131b96a09d08f74b7bd" kindref="member">solveCubicEquation</ref>(</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(a),<sp/>static_cast&lt;double&gt;(b),<sp/>static_cast&lt;double&gt;(c),</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(d),<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>solution<sp/>:<sp/>ret)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(checkValuetWithTorelance(</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solver.<ref refid="classtraffic__simulator_1_1math_1_1PolynomialSolver_1a38eef9650b6f35298cc3d9972da06c78" kindref="member">cubicFunction</ref>(</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(a),<sp/>static_cast&lt;double&gt;(b),<sp/>static_cast&lt;double&gt;(c),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;double&gt;(d),<sp/>solution),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1e-10));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<sp/>argv)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/test/src/math/test_polynominal_solver.cpp"/>
  </compounddef>
</doxygen>
