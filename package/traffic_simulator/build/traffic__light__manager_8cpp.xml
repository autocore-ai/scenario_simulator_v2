<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="traffic__light__manager_8cpp" kind="file" language="C++">
    <compoundname>traffic_light_manager.cpp</compoundname>
    <includes local="no">iterator</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes refid="traffic__light__manager_8hpp" local="no">traffic_simulator/traffic_lights/traffic_light_manager.hpp</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="7161">
        <label>scenario_simulator_exception/exception.hpp</label>
      </node>
      <node id="7173">
        <label>traffic_simulator/traffic_lights/traffic_light_state.hpp</label>
        <link refid="traffic__light__state_8hpp_source"/>
        <childnode refid="7174" relation="include">
        </childnode>
        <childnode refid="7175" relation="include">
        </childnode>
        <childnode refid="7134" relation="include">
        </childnode>
      </node>
      <node id="7132">
        <label>iomanip</label>
      </node>
      <node id="7179">
        <label>limits</label>
      </node>
      <node id="7152">
        <label>geometry_msgs/msg/pose_stamped.hpp</label>
      </node>
      <node id="7127">
        <label>iterator</label>
      </node>
      <node id="7183">
        <label>std_msgs/msg/color_rgba.hpp</label>
      </node>
      <node id="7151">
        <label>geographic_msgs/msg/geo_point.hpp</label>
      </node>
      <node id="7143">
        <label>lanelet2_routing/RoutingGraph.h</label>
      </node>
      <node id="7184">
        <label>traffic_simulator/traffic_lights/traffic_light_phase.hpp</label>
        <link refid="traffic__light__phase_8hpp_source"/>
        <childnode refid="7179" relation="include">
        </childnode>
        <childnode refid="7161" relation="include">
        </childnode>
        <childnode refid="7135" relation="include">
        </childnode>
        <childnode refid="7171" relation="include">
        </childnode>
        <childnode refid="7170" relation="include">
        </childnode>
      </node>
      <node id="7138">
        <label>lanelet2_core/geometry/Lanelet.h</label>
      </node>
      <node id="7131">
        <label>autoware_perception_msgs/msg/traffic_light_state_array.hpp</label>
      </node>
      <node id="7126">
        <label>/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/traffic_lights/traffic_light_manager.cpp</label>
        <link refid="traffic__light__manager_8cpp"/>
        <childnode refid="7127" relation="include">
        </childnode>
        <childnode refid="7128" relation="include">
        </childnode>
        <childnode refid="7129" relation="include">
        </childnode>
        <childnode refid="7130" relation="include">
        </childnode>
        <childnode refid="7185" relation="include">
        </childnode>
        <childnode refid="7171" relation="include">
        </childnode>
        <childnode refid="7170" relation="include">
        </childnode>
      </node>
      <node id="7157">
        <label>openscenario_msgs/msg/entity_status.hpp</label>
      </node>
      <node id="7174">
        <label>autoware_perception_msgs/msg/lamp_state.hpp</label>
      </node>
      <node id="7167">
        <label>geometry_msgs/msg/pose.hpp</label>
      </node>
      <node id="7181">
        <label>cassert</label>
      </node>
      <node id="7134">
        <label>stdexcept</label>
      </node>
      <node id="7129">
        <label>string</label>
      </node>
      <node id="7155">
        <label>lanelet2_extension_psim/utility/utilities.hpp</label>
      </node>
      <node id="7158">
        <label>traffic_simulator/hdmap_utils/cache.hpp</label>
        <link refid="cache_8hpp_source"/>
        <childnode refid="7150" relation="include">
        </childnode>
        <childnode refid="7159" relation="include">
        </childnode>
        <childnode refid="7160" relation="include">
        </childnode>
        <childnode refid="7161" relation="include">
        </childnode>
        <childnode refid="7162" relation="include">
        </childnode>
        <childnode refid="7172" relation="include">
        </childnode>
        <childnode refid="7170" relation="include">
        </childnode>
      </node>
      <node id="7156">
        <label>map</label>
      </node>
      <node id="7164">
        <label>traffic_simulator/math/hermite_curve.hpp</label>
        <link refid="hermite__curve_8hpp_source"/>
        <childnode refid="7165" relation="include">
        </childnode>
        <childnode refid="7166" relation="include">
        </childnode>
        <childnode refid="7150" relation="include">
        </childnode>
        <childnode refid="7159" relation="include">
        </childnode>
        <childnode refid="7167" relation="include">
        </childnode>
        <childnode refid="7168" relation="include">
        </childnode>
        <childnode refid="7169" relation="include">
        </childnode>
        <childnode refid="7170" relation="include">
        </childnode>
      </node>
      <node id="7180">
        <label>traffic_simulator/color_utils/color_utils.hpp</label>
        <link refid="color__utils_8hpp_source"/>
        <childnode refid="7181" relation="include">
        </childnode>
        <childnode refid="7182" relation="include">
        </childnode>
        <childnode refid="7156" relation="include">
        </childnode>
        <childnode refid="7183" relation="include">
        </childnode>
        <childnode refid="7129" relation="include">
        </childnode>
      </node>
      <node id="7133">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="7142">
        <label>lanelet2_routing/RoutingCost.h</label>
      </node>
      <node id="7147">
        <label>tf2_geometry_msgs/tf2_geometry_msgs.h</label>
      </node>
      <node id="7135">
        <label>traffic_simulator/hdmap_utils/hdmap_utils.hpp</label>
        <link refid="hdmap__utils_8hpp_source"/>
        <childnode refid="7136" relation="include">
        </childnode>
        <childnode refid="7137" relation="include">
        </childnode>
        <childnode refid="7138" relation="include">
        </childnode>
        <childnode refid="7139" relation="include">
        </childnode>
        <childnode refid="7140" relation="include">
        </childnode>
        <childnode refid="7141" relation="include">
        </childnode>
        <childnode refid="7142" relation="include">
        </childnode>
        <childnode refid="7143" relation="include">
        </childnode>
        <childnode refid="7144" relation="include">
        </childnode>
        <childnode refid="7145" relation="include">
        </childnode>
        <childnode refid="7146" relation="include">
        </childnode>
        <childnode refid="7147" relation="include">
        </childnode>
        <childnode refid="7148" relation="include">
        </childnode>
        <childnode refid="7149" relation="include">
        </childnode>
        <childnode refid="7150" relation="include">
        </childnode>
        <childnode refid="7151" relation="include">
        </childnode>
        <childnode refid="7152" relation="include">
        </childnode>
        <childnode refid="7153" relation="include">
        </childnode>
        <childnode refid="7154" relation="include">
        </childnode>
        <childnode refid="7155" relation="include">
        </childnode>
        <childnode refid="7156" relation="include">
        </childnode>
        <childnode refid="7128" relation="include">
        </childnode>
        <childnode refid="7157" relation="include">
        </childnode>
        <childnode refid="7133" relation="include">
        </childnode>
        <childnode refid="7129" relation="include">
        </childnode>
        <childnode refid="7158" relation="include">
        </childnode>
        <childnode refid="7164" relation="include">
        </childnode>
        <childnode refid="7173" relation="include">
        </childnode>
        <childnode refid="7172" relation="include">
        </childnode>
        <childnode refid="7171" relation="include">
        </childnode>
        <childnode refid="7170" relation="include">
        </childnode>
        <childnode refid="7176" relation="include">
        </childnode>
      </node>
      <node id="7163">
        <label>exception</label>
      </node>
      <node id="7136">
        <label>geometry_msgs/msg/vector3.h</label>
      </node>
      <node id="7168">
        <label>geometry_msgs/msg/vector3.hpp</label>
      </node>
      <node id="7178">
        <label>autoware_perception_msgs/msg/traffic_light_state.hpp</label>
      </node>
      <node id="7141">
        <label>lanelet2_routing/Route.h</label>
      </node>
      <node id="7154">
        <label>lanelet2_extension_psim/utility/query.hpp</label>
      </node>
      <node id="7166">
        <label>quaternion_operation/quaternion_operation.h</label>
      </node>
      <node id="7153">
        <label>lanelet2_extension_psim/utility/message_conversion.hpp</label>
      </node>
      <node id="7159">
        <label>geometry_msgs/msg/point.hpp</label>
      </node>
      <node id="7182">
        <label>cstdio</label>
      </node>
      <node id="7170">
        <label>vector</label>
      </node>
      <node id="7149">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="7165">
        <label>gtest/gtest.h</label>
      </node>
      <node id="7171">
        <label>utility</label>
      </node>
      <node id="7169">
        <label>traffic_simulator/math/polynomial_solver.hpp</label>
        <link refid="polynomial__solver_8hpp_source"/>
        <childnode refid="7170" relation="include">
        </childnode>
      </node>
      <node id="7145">
        <label>lanelet2_traffic_rules/TrafficRulesFactory.h</label>
      </node>
      <node id="7162">
        <label>traffic_simulator/math/catmull_rom_spline.hpp</label>
        <link refid="catmull__rom__spline_8hpp_source"/>
        <childnode refid="7163" relation="include">
        </childnode>
        <childnode refid="7159" relation="include">
        </childnode>
        <childnode refid="7129" relation="include">
        </childnode>
        <childnode refid="7164" relation="include">
        </childnode>
        <childnode refid="7171" relation="include">
        </childnode>
        <childnode refid="7170" relation="include">
        </childnode>
      </node>
      <node id="7140">
        <label>lanelet2_core/primitives/LaneletSequence.h</label>
      </node>
      <node id="7175">
        <label>iostream</label>
      </node>
      <node id="7137">
        <label>lanelet2_core/LaneletMap.h</label>
      </node>
      <node id="7177">
        <label>traffic_simulator/traffic_lights/traffic_light.hpp</label>
        <link refid="traffic__light_8hpp_source"/>
        <childnode refid="7178" relation="include">
        </childnode>
        <childnode refid="7175" relation="include">
        </childnode>
        <childnode refid="7179" relation="include">
        </childnode>
        <childnode refid="7134" relation="include">
        </childnode>
        <childnode refid="7180" relation="include">
        </childnode>
        <childnode refid="7184" relation="include">
        </childnode>
        <childnode refid="7173" relation="include">
        </childnode>
        <childnode refid="7172" relation="include">
        </childnode>
        <childnode refid="7171" relation="include">
        </childnode>
        <childnode refid="7170" relation="include">
        </childnode>
      </node>
      <node id="7172">
        <label>unordered_map</label>
      </node>
      <node id="7130">
        <label>traffic_simulator/traffic_lights/traffic_light_manager.hpp</label>
        <link refid="traffic__light__manager_8hpp_source"/>
        <childnode refid="7131" relation="include">
        </childnode>
        <childnode refid="7132" relation="include">
        </childnode>
        <childnode refid="7128" relation="include">
        </childnode>
        <childnode refid="7133" relation="include">
        </childnode>
        <childnode refid="7134" relation="include">
        </childnode>
        <childnode refid="7129" relation="include">
        </childnode>
        <childnode refid="7135" relation="include">
        </childnode>
        <childnode refid="7177" relation="include">
        </childnode>
        <childnode refid="7172" relation="include">
        </childnode>
        <childnode refid="7171" relation="include">
        </childnode>
        <childnode refid="7170" relation="include">
        </childnode>
        <childnode refid="7176" relation="include">
        </childnode>
      </node>
      <node id="7148">
        <label>autoware_auto_msgs/msg/had_map_bin.hpp</label>
      </node>
      <node id="7176">
        <label>visualization_msgs/msg/marker_array.hpp</label>
      </node>
      <node id="7160">
        <label>mutex</label>
      </node>
      <node id="7139">
        <label>lanelet2_core/primitives/BasicRegulatoryElements.h</label>
      </node>
      <node id="7144">
        <label>lanelet2_routing/RoutingGraphContainer.h</label>
      </node>
      <node id="7150">
        <label>boost/optional.hpp</label>
      </node>
      <node id="7146">
        <label>tf2/LinearMath/Matrix3x3.h</label>
      </node>
      <node id="7185">
        <label>type_traits</label>
      </node>
      <node id="7128">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacetraffic__simulator">traffic_simulator</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2015-2020<sp/>Tier<sp/>IV,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;traffic_simulator/traffic_lights/traffic_light_manager.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetraffic__simulator" kindref="compound">traffic_simulator</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal">TrafficLightManager::TrafficLightManager(</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;hdmap_utils::HdMapUtils&gt;<sp/>&amp;<sp/>hdmap_utils_ptr,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::Publisher&lt;visualization_msgs::msg::MarkerArray&gt;::SharedPtr<sp/>&amp;<sp/>publisher,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rclcpp::Publisher&lt;autoware_perception_msgs::msg::TrafficLightStateArray&gt;::SharedPtr<sp/>&amp;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>traffic_light_state_array_publisher,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;rclcpp::Clock&gt;<sp/>&amp;<sp/>clock_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>map_frame)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">:<sp/>traffic_light_state_array_publisher_(traffic_light_state_array_publisher),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>traffic_lights_(),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>marker_pub_(publisher),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>clock_ptr_(clock_ptr),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>map_frame_(map_frame)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>(*hdmap_utils_ptr).getTrafficLightIds())<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;TrafficLightColor,<sp/>geometry_msgs::msg::Point&gt;<sp/>color_positions;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>red_position<sp/>=</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hdmap_utils_ptr-&gt;getTrafficLightBulbPosition(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>TrafficLightColor::RED);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(red_position)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color_positions.emplace(TrafficLightColor::RED,<sp/>red_position.get());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>yellow_position<sp/>=</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hdmap_utils_ptr-&gt;getTrafficLightBulbPosition(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>TrafficLightColor::YELLOW);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yellow_position)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color_positions.emplace(TrafficLightColor::YELLOW,<sp/>yellow_position.get());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>green_position<sp/>=</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hdmap_utils_ptr-&gt;getTrafficLightBulbPosition(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>TrafficLightColor::GREEN);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(green_position)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>color_positions.emplace(TrafficLightColor::GREEN,<sp/>green_position.get());</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>traffic_lights_.emplace(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::piecewise_construct,<sp/>std::make_tuple(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),<sp/>std::make_tuple(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>color_positions));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">std::vector&lt;std::int64_t&gt;<sp/>TrafficLightManager::getIds()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="64"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>std::vector&lt;std::int64_t&gt;<sp/>result;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>std::transform(</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::begin(traffic_lights_),<sp/>std::end(traffic_lights_),<sp/>std::back_inserter(result),</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>each)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(each);<sp/>});</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLightManager::deleteAllMarkers()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="75"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>visualization_msgs::msg::MarkerArray<sp/>msg;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>visualization_msgs::msg::Marker<sp/>marker;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>marker.action<sp/>=<sp/>marker.DELETEALL;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>msg.markers.push_back(marker);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>marker_pub_-&gt;publish(msg);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLightManager::drawMarkers()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="87"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>visualization_msgs::msg::MarkerArray<sp/>msg;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now<sp/>=<sp/>(*clock_ptr_).now();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>light<sp/>:<sp/>traffic_lights_)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>color<sp/>=<sp/>std::get&lt;1&gt;(light).getColor();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color<sp/>!=<sp/>TrafficLightColor::NONE)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visualization_msgs::msg::Marker<sp/>marker;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.header.stamp<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.header.frame_id<sp/>=<sp/>map_frame_;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.action<sp/>=<sp/>marker.ADD;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.ns<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bulb&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.id<sp/>=<sp/>light.first;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.type<sp/>=<sp/>marker.SPHERE;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.pose.position<sp/>=<sp/>std::get&lt;1&gt;(light).getPosition(color);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.pose.orientation<sp/>=<sp/>geometry_msgs::msg::Quaternion();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.scale.x<sp/>=<sp/>0.3;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.scale.y<sp/>=<sp/>0.3;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.scale.z<sp/>=<sp/>0.3;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>marker.color<sp/>=<sp/>color_utils::makeColorMsg(boost::lexical_cast&lt;std::string&gt;(color));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg.markers.push_back(marker);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>marker_pub_-&gt;publish(msg);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrafficLightManager::update(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>publishTrafficLightStateArray();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>light<sp/>:<sp/>traffic_lights_)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>light.second.update(step_time);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::any_of(</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::begin(traffic_lights_),<sp/>std::end(traffic_lights_),</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>id_and_traffic_light)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;1&gt;(id_and_traffic_light).colorChanged();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}))<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>deleteAllMarkers();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>drawMarkers();</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>traffic_simulator</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/scenario_simulator_v2/scenario_simulator_v2/simulation/traffic_simulator/src/traffic_lights/traffic_light_manager.cpp"/>
  </compounddef>
</doxygen>
